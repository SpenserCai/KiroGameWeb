{"version":3,"file":"index-5CG2IcUa.js","sources":["../../src/config.js","../../src/core/EventBus.js","../../src/core/StateManager.js","../../src/core/GameEngine.js","../../src/game/Tile.js","../../src/game/BoardManager.js","../../src/game/MatchDetector.js","../../src/game/SpecialTileManager.js","../../src/rendering/Particle.js","../../src/rendering/ParticleEmitter.js","../../src/utils/PerformanceMonitor.js","../../src/rendering/ParticleEffects.js","../../src/rendering/RenderEngine.js","../../src/rendering/TileTextureFactory.js","../../src/input/InputManager.js","../../src/animation/Easing.js","../../src/animation/Tween.js","../../src/animation/AnimationController.js","../../src/utils/ErrorHandler.js","../../src/main.js"],"sourcesContent":["/**\n * 游戏配置对象\n * 包含游戏板尺寸、图标类型、动画时长、颜色、分数规则、计时器配置等\n */\nexport const GameConfig = {\n  // 游戏板配置\n  board: {\n    rows: 8,\n    cols: 8,\n    tileTypes: 5  // 普通图标类型数量\n  },\n\n  // 渲染配置\n  rendering: {\n    tileSize: 64,           // 图标尺寸（像素）\n    padding: 8,             // 图标间距\n    boardOffsetX: 50,       // 游戏板X偏移\n    boardOffsetY: 100,      // 游戏板Y偏移\n    canvasWidth: 600,       // 画布宽度\n    canvasHeight: 700,      // 画布高度\n    backgroundColor: 0x2c3e50,  // 背景颜色\n    gridColor: 0x34495e,    // 网格颜色\n    selectionColor: 0xf39c12,  // 选中边框颜色\n    selectionWidth: 3       // 选中边框宽度\n  },\n\n  // 动画配置\n  animation: {\n    swapDuration: 200,      // 交换动画时长（毫秒）\n    removeDuration: 300,    // 消除动画时长\n    fallDuration: 400,      // 下落动画时长\n    spawnDuration: 200,     // 生成动画时长\n    maxConcurrentAnimations: 20  // 最大并发动画数量\n  },\n\n  // 分数配置\n  scoring: {\n    baseScore: 10,          // 每个图标基础分数\n    comboMultiplier: 1.5,   // 连锁倍数\n    match4Bonus: 20,        // 4连额外奖励\n    match5Bonus: 50,        // 5连及以上额外奖励\n    specialTileMultiplier: 2  // 特殊图标分数倍数\n  },\n\n  // 计时器配置\n  timer: {\n    defaultTime: 60,        // 默认游戏时长（秒）\n    warningTime: 10         // 警告时间阈值（秒）\n  },\n\n  // 图标颜色配置（用于调试，实际使用PNG纹理）\n  colors: {\n    type0: 0xFF6B6B,  // 红色小鬼\n    type1: 0x4ECDC4,  // 青色小鬼\n    type2: 0xFFE66D,  // 黄色小鬼\n    type3: 0xA8E6CF,  // 绿色小鬼\n    type4: 0xC7CEEA   // 紫色小鬼\n  },\n\n  // 资源路径配置\n  assets: {\n    images: {\n      ghosts: [\n        '/assets/images/ghosts/ghost-red.png',\n        '/assets/images/ghosts/ghost-blue.png',\n        '/assets/images/ghosts/ghost-yellow.png',\n        '/assets/images/ghosts/ghost-green.png',\n        '/assets/images/ghosts/ghost-purple.png'\n      ],\n      special: {\n        bomb: '/assets/images/special/bomb.png',\n        colorBomb: '/assets/images/special/color-bomb.png',\n        rowClear: '/assets/images/special/row-clear.png',\n        colClear: '/assets/images/special/col-clear.png'\n      }\n    }\n  },\n\n  // 特殊图标配置\n  specialTiles: {\n    bomb: {\n      matchLength: 4,       // 需要4连才能生成\n      effectRange: 1        // 3x3范围（中心±1）\n    },\n    colorBomb: {\n      matchLength: 5        // 需要5连才能生成\n    },\n    lineClear: {\n      matchType: 'L_SHAPE'  // L型或T型匹配生成\n    }\n  },\n\n  // 性能配置\n  performance: {\n    targetFPS: 60,\n    maxMemoryMB: 100,\n    matchDetectionTimeoutMS: 5\n  },\n\n  // 粒子效果配置\n  particles: {\n    enabled: true,                    // 是否启用粒子效果\n    maxParticles: 10000,              // 最大粒子数\n    \n    explosion: {\n      count: 25,                      // 爆炸粒子数量\n      lifetime: 0.5,                  // 生命周期（秒）\n      speed: { min: 100, max: 200 },  // 初速度范围（像素/秒）\n      gravity: 200,                   // 重力加速度（像素/秒²）\n      size: { min: 4, max: 8 }        // 粒子大小范围（像素）\n    },\n    \n    combo: {\n      baseCount: 10,                  // 基础粒子数\n      countPerCombo: 10,              // 每连锁增加的粒子数\n      lifetime: 0.8,                  // 生命周期（秒）\n      speed: { min: 150, max: 300 }   // 初速度范围（像素/秒）\n    },\n    \n    special: {\n      bomb: {\n        count: 60,\n        lifetime: 0.6,\n        speed: { min: 200, max: 400 }\n      },\n      colorBomb: {\n        count: 120,\n        lifetime: 1.0,\n        speed: { min: 100, max: 300 }\n      },\n      lineClear: {\n        count: 40,\n        lifetime: 0.5,\n        speed: { min: 300, max: 500 }\n      }\n    },\n    \n    ambient: {\n      count: 15,                      // 背景粒子数量\n      lifetime: 5.0,                  // 生命周期（秒）\n      speed: { min: 20, max: 50 }     // 下落速度（像素/秒）\n    }\n  },\n\n  // 调试配置\n  debug: {\n    enabled: false,         // 是否启用调试模式\n    showFPS: false,         // 是否显示FPS\n    showGrid: true,         // 是否显示网格\n    logEvents: false        // 是否记录事件\n  }\n};\n\nexport default GameConfig;\n","/**\n * 事件总线 - 实现发布-订阅模式\n * 用于模块间的松耦合通信\n */\n\n// 游戏事件常量\nexport const GameEvents = {\n  // 游戏生命周期事件\n  GAME_INIT: 'game:init',\n  GAME_START: 'game:start',\n  GAME_RESET: 'game:reset',\n  GAME_OVER: 'game:over',\n  \n  // 图标事件\n  TILE_SELECT: 'tile:select',\n  TILE_DESELECT: 'tile:deselect',\n  TILE_SWAP_START: 'tile:swap:start',\n  TILE_SWAP_COMPLETE: 'tile:swap:complete',\n  TILE_SWAP_REVERT: 'tile:swap:revert',\n  TILE_REMOVE_START: 'tile:remove:start',\n  TILE_REMOVE_COMPLETE: 'tile:remove:complete',\n  TILE_FALL_START: 'tile:fall:start',\n  TILE_FALL_COMPLETE: 'tile:fall:complete',\n  TILE_SPAWN_START: 'tile:spawn:start',\n  TILE_SPAWN_COMPLETE: 'tile:spawn:complete',\n  \n  // 匹配事件\n  MATCH_FOUND: 'match:found',\n  MATCH_NONE: 'match:none',\n  \n  // 分数和连锁事件\n  SCORE_UPDATE: 'score:update',\n  COMBO_TRIGGER: 'combo:trigger',\n  \n  // 状态事件\n  STATE_CHANGE: 'state:change',\n  \n  // 动画事件\n  ANIMATION_START: 'animation:start',\n  ANIMATION_COMPLETE: 'animation:complete',\n  ANIMATION_QUEUE_EMPTY: 'animation:queue:empty',\n  \n  // 输入事件\n  INPUT_ENABLED: 'input:enabled',\n  INPUT_DISABLED: 'input:disabled',\n  \n  // 游戏板事件\n  BOARD_STABLE: 'board:stable',\n  BOARD_SHUFFLE: 'board:shuffle',\n  \n  // 移动检测事件\n  MOVES_NONE: 'moves:none',\n  \n  // 计时器事件\n  TIMER_UPDATE: 'timer:update',\n  TIMER_WARNING: 'timer:warning',\n  \n  // 错误事件\n  ERROR: 'error'\n};\n\n/**\n * 事件总线类\n */\nexport class EventBus {\n  constructor() {\n    // 存储事件监听器的 Map: eventName -> Set<callback>\n    this.listeners = new Map();\n    \n    // 存储一次性监听器的 Set\n    this.onceListeners = new Set();\n    \n    // 调试模式\n    this.debug = false;\n  }\n\n  /**\n   * 订阅事件\n   * @param {string} eventName - 事件名称\n   * @param {Function} callback - 回调函数\n   * @returns {Function} 取消订阅函数\n   */\n  on(eventName, callback) {\n    // 验证参数\n    if (typeof eventName !== 'string' || !eventName) {\n      throw new Error('事件名称必须是非空字符串');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new Error('回调必须是函数');\n    }\n\n    // 如果事件不存在，创建新的 Set\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, new Set());\n    }\n\n    // 添加回调到监听器集合\n    this.listeners.get(eventName).add(callback);\n\n    if (this.debug) {\n      console.log(`[EventBus] 订阅事件: ${eventName}`);\n    }\n\n    // 返回取消订阅函数\n    return () => this.off(eventName, callback);\n  }\n\n  /**\n   * 取消订阅事件\n   * @param {string} eventName - 事件名称\n   * @param {Function} callback - 回调函数\n   */\n  off(eventName, callback) {\n    if (!this.listeners.has(eventName)) {\n      return;\n    }\n\n    const callbacks = this.listeners.get(eventName);\n    callbacks.delete(callback);\n\n    // 如果没有监听器了，删除事件\n    if (callbacks.size === 0) {\n      this.listeners.delete(eventName);\n    }\n\n    // 从一次性监听器集合中移除\n    this.onceListeners.delete(callback);\n\n    if (this.debug) {\n      console.log(`[EventBus] 取消订阅事件: ${eventName}`);\n    }\n  }\n\n  /**\n   * 一次性订阅事件（触发一次后自动取消订阅）\n   * @param {string} eventName - 事件名称\n   * @param {Function} callback - 回调函数\n   * @returns {Function} 取消订阅函数\n   */\n  once(eventName, callback) {\n    // 验证参数\n    if (typeof eventName !== 'string' || !eventName) {\n      throw new Error('事件名称必须是非空字符串');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new Error('回调必须是函数');\n    }\n\n    // 创建包装函数\n    const wrappedCallback = (data) => {\n      // 执行原始回调\n      callback(data);\n      // 自动取消订阅\n      this.off(eventName, wrappedCallback);\n    };\n\n    // 标记为一次性监听器\n    this.onceListeners.add(wrappedCallback);\n\n    // 订阅事件\n    return this.on(eventName, wrappedCallback);\n  }\n\n  /**\n   * 发布事件\n   * @param {string} eventName - 事件名称\n   * @param {*} data - 事件数据\n   */\n  emit(eventName, data = null) {\n    if (this.debug) {\n      console.log(`[EventBus] 发布事件: ${eventName}`, data);\n    }\n\n    // 如果没有监听器，直接返回\n    if (!this.listeners.has(eventName)) {\n      return;\n    }\n\n    // 获取所有监听器并执行\n    const callbacks = this.listeners.get(eventName);\n    \n    // 使用 Array.from 创建副本，避免在回调中修改监听器集合导致问题\n    Array.from(callbacks).forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`[EventBus] 事件处理错误 (${eventName}):`, error);\n        // 发布错误事件\n        if (eventName !== GameEvents.ERROR) {\n          this.emit(GameEvents.ERROR, {\n            type: 'EVENT_HANDLER_ERROR',\n            message: `事件 ${eventName} 的处理器抛出错误`,\n            error,\n            eventName,\n            data\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * 清除所有监听器\n   */\n  clear() {\n    this.listeners.clear();\n    this.onceListeners.clear();\n    \n    if (this.debug) {\n      console.log('[EventBus] 清除所有监听器');\n    }\n  }\n\n  /**\n   * 清除指定事件的所有监听器\n   * @param {string} eventName - 事件名称\n   */\n  clearEvent(eventName) {\n    if (this.listeners.has(eventName)) {\n      this.listeners.delete(eventName);\n      \n      if (this.debug) {\n        console.log(`[EventBus] 清除事件监听器: ${eventName}`);\n      }\n    }\n  }\n\n  /**\n   * 获取指定事件的监听器数量\n   * @param {string} eventName - 事件名称\n   * @returns {number} 监听器数量\n   */\n  listenerCount(eventName) {\n    if (!this.listeners.has(eventName)) {\n      return 0;\n    }\n    return this.listeners.get(eventName).size;\n  }\n\n  /**\n   * 获取所有事件名称\n   * @returns {string[]} 事件名称数组\n   */\n  eventNames() {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * 启用调试模式\n   */\n  enableDebug() {\n    this.debug = true;\n    console.log('[EventBus] 调试模式已启用');\n  }\n\n  /**\n   * 禁用调试模式\n   */\n  disableDebug() {\n    this.debug = false;\n  }\n}\n\n// 导出单例实例\nexport const eventBus = new EventBus();\n\nexport default EventBus;\n","/**\n * 状态管理器 - 管理游戏状态机和状态转换\n */\n\nimport { GameEvents } from './EventBus.js';\n\n/**\n * 游戏状态常量\n */\nexport const GameState = {\n  MENU: 'menu',                // 主菜单\n  PLAYING: 'playing',          // 游戏中\n  PAUSED: 'paused',            // 暂停\n  GAME_OVER: 'game_over',      // 游戏结束\n  ANIMATING: 'animating'       // 动画播放中\n};\n\n/**\n * 状态管理器类\n */\nexport class StateManager {\n  /**\n   * 创建状态管理器\n   * @param {string} initialState - 初始状态\n   * @param {EventBus} eventBus - 事件总线\n   */\n  constructor(initialState = GameState.MENU, eventBus) {\n    this.currentState = initialState;\n    this.previousState = null;\n    this.eventBus = eventBus;\n    \n    // 状态转换规则表\n    this.transitionRules = this._initTransitionRules();\n    \n    // 状态进入/退出回调\n    this.stateEnterCallbacks = new Map();\n    this.stateExitCallbacks = new Map();\n  }\n\n  /**\n   * 初始化状态转换规则\n   * @returns {Map} 状态转换规则表\n   */\n  _initTransitionRules() {\n    const rules = new Map();\n    \n    // MENU 可以转换到 PLAYING\n    rules.set(GameState.MENU, [GameState.PLAYING]);\n    \n    // PLAYING 可以转换到 ANIMATING, PAUSED, GAME_OVER\n    rules.set(GameState.PLAYING, [\n      GameState.ANIMATING,\n      GameState.PAUSED,\n      GameState.GAME_OVER\n    ]);\n    \n    // ANIMATING 可以转换到 PLAYING, GAME_OVER\n    rules.set(GameState.ANIMATING, [\n      GameState.PLAYING,\n      GameState.GAME_OVER\n    ]);\n    \n    // PAUSED 可以转换到 PLAYING, MENU\n    rules.set(GameState.PAUSED, [\n      GameState.PLAYING,\n      GameState.MENU\n    ]);\n    \n    // GAME_OVER 可以转换到 MENU\n    rules.set(GameState.GAME_OVER, [GameState.MENU]);\n    \n    return rules;\n  }\n\n  /**\n   * 获取当前状态\n   * @returns {string} 当前状态\n   */\n  getCurrentState() {\n    return this.currentState;\n  }\n\n  /**\n   * 获取上一个状态\n   * @returns {string|null} 上一个状态\n   */\n  getPreviousState() {\n    return this.previousState;\n  }\n\n  /**\n   * 检查是否可以转换到目标状态\n   * @param {string} targetState - 目标状态\n   * @returns {boolean} 是否可以转换\n   */\n  canTransition(targetState) {\n    const allowedStates = this.transitionRules.get(this.currentState);\n    \n    if (!allowedStates) {\n      console.warn(`未定义状态 ${this.currentState} 的转换规则`);\n      return false;\n    }\n    \n    return allowedStates.includes(targetState);\n  }\n\n  /**\n   * 设置新状态\n   * @param {string} newState - 新状态\n   * @param {Object} data - 状态数据（可选）\n   * @returns {boolean} 是否成功转换\n   */\n  setState(newState, data = {}) {\n    // 验证状态\n    if (!Object.values(GameState).includes(newState)) {\n      console.error(`无效的状态: ${newState}`);\n      return false;\n    }\n    \n    // 如果状态相同，不做任何操作\n    if (this.currentState === newState) {\n      return true;\n    }\n    \n    // 检查是否可以转换\n    if (!this.canTransition(newState)) {\n      console.warn(`无法从 ${this.currentState} 转换到 ${newState}`);\n      return false;\n    }\n    \n    const oldState = this.currentState;\n    \n    // 执行状态退出回调\n    this.onStateExit(oldState, data);\n    \n    // 更新状态\n    this.previousState = oldState;\n    this.currentState = newState;\n    \n    // 执行状态进入回调\n    this.onStateEnter(newState, data);\n    \n    // 发布状态变化事件\n    if (this.eventBus) {\n      this.eventBus.emit(GameEvents.STATE_CHANGE, {\n        from: oldState,\n        to: newState,\n        data\n      });\n    }\n    \n    console.log(`🔄 状态转换: ${oldState} -> ${newState}`);\n    \n    return true;\n  }\n\n  /**\n   * 状态进入回调\n   * @param {string} state - 进入的状态\n   * @param {Object} data - 状态数据\n   */\n  onStateEnter(state, data) {\n    const callback = this.stateEnterCallbacks.get(state);\n    if (callback) {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`状态进入回调错误 (${state}):`, error);\n      }\n    }\n  }\n\n  /**\n   * 状态退出回调\n   * @param {string} state - 退出的状态\n   * @param {Object} data - 状态数据\n   */\n  onStateExit(state, data) {\n    const callback = this.stateExitCallbacks.get(state);\n    if (callback) {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`状态退出回调错误 (${state}):`, error);\n      }\n    }\n  }\n\n  /**\n   * 注册状态进入回调\n   * @param {string} state - 状态\n   * @param {Function} callback - 回调函数\n   */\n  registerEnterCallback(state, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('回调必须是函数');\n    }\n    this.stateEnterCallbacks.set(state, callback);\n  }\n\n  /**\n   * 注册状态退出回调\n   * @param {string} state - 状态\n   * @param {Function} callback - 回调函数\n   */\n  registerExitCallback(state, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('回调必须是函数');\n    }\n    this.stateExitCallbacks.set(state, callback);\n  }\n\n  /**\n   * 检查是否处于指定状态\n   * @param {string} state - 状态\n   * @returns {boolean}\n   */\n  isState(state) {\n    return this.currentState === state;\n  }\n\n  /**\n   * 检查是否处于游戏中状态（PLAYING 或 ANIMATING）\n   * @returns {boolean}\n   */\n  isPlaying() {\n    return this.currentState === GameState.PLAYING || \n           this.currentState === GameState.ANIMATING;\n  }\n\n  /**\n   * 检查是否处于暂停状态\n   * @returns {boolean}\n   */\n  isPaused() {\n    return this.currentState === GameState.PAUSED;\n  }\n\n  /**\n   * 检查是否处于游戏结束状态\n   * @returns {boolean}\n   */\n  isGameOver() {\n    return this.currentState === GameState.GAME_OVER;\n  }\n\n  /**\n   * 检查是否处于动画状态\n   * @returns {boolean}\n   */\n  isAnimating() {\n    return this.currentState === GameState.ANIMATING;\n  }\n\n  /**\n   * 重置状态管理器\n   */\n  reset() {\n    this.previousState = null;\n    this.currentState = GameState.MENU;\n    console.log('🔄 状态管理器已重置');\n  }\n}\n\nexport default StateManager;\n","/**\n * 游戏引擎 - 核心游戏逻辑协调器\n */\n\nimport { GameEvents } from './EventBus.js';\nimport { GameState } from './StateManager.js';\n\n/**\n * 游戏引擎类\n */\nexport class GameEngine {\n  /**\n   * 创建游戏引擎\n   * @param {Object} config - 游戏配置\n   * @param {EventBus} eventBus - 事件总线\n   * @param {BoardManager} boardManager - 游戏板管理器\n   * @param {MatchDetector} matchDetector - 匹配检测器\n   * @param {StateManager} stateManager - 状态管理器\n   * @param {AnimationController} animationController - 动画控制器（可选）\n   * @param {SpecialTileManager} specialTileManager - 特殊图标管理器（可选）\n   */\n  constructor(config, eventBus, boardManager, matchDetector, stateManager, animationController = null, specialTileManager = null) {\n    this.config = config;\n    this.eventBus = eventBus;\n    this.boardManager = boardManager;\n    this.matchDetector = matchDetector;\n    this.stateManager = stateManager;\n    this.animationController = animationController;\n    this.specialTileManager = specialTileManager;\n    \n    // 游戏数据\n    this.score = 0;\n    this.moves = 0;\n    this.comboCount = 0;\n    \n    // 计时器\n    this.remainingTime = this.config.timer.defaultTime;\n    this.isTimerRunning = false;\n    \n    // 处理状态\n    this.isProcessing = false;\n    \n    // 绑定方法\n    this.handleSwap = this.handleSwap.bind(this);\n  }\n\n  /**\n   * 设置动画控制器\n   * @param {AnimationController} animationController - 动画控制器\n   */\n  setAnimationController(animationController) {\n    this.animationController = animationController;\n  }\n\n  /**\n   * 设置特殊图标管理器\n   * @param {SpecialTileManager} specialTileManager - 特殊图标管理器\n   */\n  setSpecialTileManager(specialTileManager) {\n    this.specialTileManager = specialTileManager;\n  }\n\n  /**\n   * 初始化游戏引擎\n   */\n  init() {\n    // 重置游戏数据\n    this.score = 0;\n    this.moves = 0;\n    this.comboCount = 0;\n    this.isProcessing = false;\n    this.remainingTime = this.config.timer.defaultTime;\n    this.isTimerRunning = false;\n    \n    // 订阅事件\n    this.setupEventListeners();\n    \n    console.log('✅ GameEngine 初始化完成');\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    // 订阅交换开始事件\n    this.eventBus.on(GameEvents.TILE_SWAP_START, this.handleSwap);\n    \n    // 订阅游戏重置事件\n    this.eventBus.on(GameEvents.GAME_RESET, () => this.reset());\n    \n    // 订阅暂停/恢复事件\n    this.eventBus.on('game:pause', () => this.pause());\n    this.eventBus.on('game:resume', () => this.resume());\n    this.eventBus.on('game:restart', () => this.restart());\n  }\n\n  /**\n   * 处理交换请求\n   * @param {Object} data - 交换数据 {tile1, tile2, pos1, pos2, sprite1, sprite2}\n   */\n  async handleSwap(data) {\n    const { tile1, tile2, pos1, pos2, sprite1, sprite2 } = data;\n    \n    // 如果正在处理，忽略新的交换请求\n    if (this.isProcessing) {\n      console.log('⚠️  正在处理中，忽略交换请求');\n      return;\n    }\n    \n    // 检查游戏状态\n    if (!this.stateManager.isState(GameState.PLAYING)) {\n      console.log('⚠️  游戏未在进行中，忽略交换请求');\n      return;\n    }\n    \n    // 标记为处理中\n    this.isProcessing = true;\n    \n    // 切换到动画状态\n    this.stateManager.setState(GameState.ANIMATING);\n    \n    // 禁用输入\n    this.eventBus.emit(GameEvents.INPUT_DISABLED);\n    \n    try {\n      // 检查是否是特殊图标交换\n      const isSpecialSwap = tile1.isSpecial || tile2.isSpecial;\n      \n      // 执行交换\n      this.boardManager.swapTiles(pos1, pos2);\n      \n      // ✅ 在交换之后计算特殊图标激活位置（使用交换后的坐标）\n      let specialActivationPositions = [];\n      \n      // 如果两个都是特殊图标，检测组合效果\n      if (tile1.isSpecial && tile2.isSpecial && this.specialTileManager) {\n        const combo = this.specialTileManager.detectSpecialCombo(tile1, tile2);\n        if (combo) {\n          console.log(`💥 特殊图标组合: ${combo.description}`);\n          specialActivationPositions = combo.positions;\n          \n          // 发布特殊组合事件\n          this.eventBus.emit('special:combo:activated', {\n            tile1,\n            tile2,\n            combo\n          });\n        }\n      }\n      // 如果只有一个是特殊图标，检测单个激活\n      else if (isSpecialSwap && this.specialTileManager) {\n        const specialTile = tile1.isSpecial ? tile1 : tile2;\n        const normalTile = tile1.isSpecial ? tile2 : tile1;\n        \n        specialActivationPositions = this.specialTileManager.detectSpecialTileActivation(\n          specialTile,\n          normalTile\n        );\n        \n        if (specialActivationPositions.length > 0) {\n          console.log(`⚡ 特殊图标激活: ${specialTile.specialType}, 影响 ${specialActivationPositions.length} 个图标`);\n          \n          // 发布特殊图标激活事件\n          this.eventBus.emit('special:tile:activated', {\n            tile: specialTile,\n            targetTile: normalTile,\n            positions: specialActivationPositions\n          });\n        }\n      }\n      \n      // 发布交换完成事件\n      this.eventBus.emit(GameEvents.TILE_SWAP_COMPLETE, {\n        tile1,\n        tile2,\n        pos1,\n        pos2\n      });\n      \n      // 播放交换动画\n      if (this.animationController && sprite1 && sprite2) {\n        await this.animationController.animateSwap(\n          sprite1,\n          sprite2,\n          this.config.animation.swapDuration\n        );\n      } else {\n        // 降级：使用延时模拟\n        await this.delay(this.config.animation.swapDuration);\n      }\n      \n      // 如果有特殊图标激活，直接处理消除\n      if (specialActivationPositions.length > 0) {\n        this.moves++;\n        this.eventBus.emit('moves:update', { moves: this.moves });\n        \n        // 计算特殊图标分数\n        const specialTile = tile1.isSpecial ? tile1 : tile2;\n        const bonus = this.specialTileManager.calculateSpecialBonus(\n          specialTile.specialType,\n          specialActivationPositions.length\n        );\n        \n        this.score += bonus;\n        this.eventBus.emit(GameEvents.SCORE_UPDATE, {\n          score: this.score,\n          delta: bonus,\n          combo: 1,\n          isSpecial: true,\n          specialType: specialTile.specialType\n        });\n        \n        // ✅ 收集要移除的图标对象\n        const tilesToRemove = specialActivationPositions\n          .map(pos => this.boardManager.getTile(pos.x, pos.y))\n          .filter(tile => tile !== null);\n        \n        // ✅ 发布移除开始事件\n        this.eventBus.emit(GameEvents.TILE_REMOVE_START, {\n          tiles: tilesToRemove\n        });\n        \n        // ✅ 播放消除动画\n        if (this.animationController && this.renderEngine) {\n          const sprites = tilesToRemove\n            .map(tile => this.renderEngine.getTileSprite(tile.id))\n            .filter(sprite => sprite !== undefined);\n          \n          if (sprites.length > 0) {\n            await this.animationController.animateRemove(\n              sprites,\n              this.config.animation.removeDuration\n            );\n          }\n        } else {\n          // 降级：使用延时模拟\n          await this.delay(this.config.animation.removeDuration);\n        }\n        \n        // 移除激活位置的图标\n        this.boardManager.removeTiles(specialActivationPositions);\n        \n        // ✅ 发布移除完成事件\n        this.eventBus.emit(GameEvents.TILE_REMOVE_COMPLETE, {\n          tiles: tilesToRemove,\n          positions: specialActivationPositions\n        });\n        \n        // 重置连锁计数\n        this.comboCount = 1;\n        \n        // 继续处理下落和填充\n        await this.processFallAndFill(this.renderEngine);\n        \n        // 处理可能的连锁匹配\n        await this.processMatches(this.renderEngine);\n      } else {\n        // 检测普通匹配\n        const matches = this.matchDetector.findMatches(this.boardManager);\n        \n        if (matches.length > 0) {\n          // 有匹配：处理匹配消除流程\n          console.log(`✅ 发现匹配: ${matches.length} 个`);\n          this.moves++;\n          \n          // 发布移动次数更新事件\n          this.eventBus.emit('moves:update', { moves: this.moves });\n          \n          // 重置连锁计数\n          this.comboCount = 1;\n          \n          // 处理匹配（传递 renderEngine）\n          await this.processMatches(this.renderEngine);\n        } else {\n          // 无匹配：交换回原位置\n          console.log('❌ 无匹配，交换回原位置');\n          \n          this.boardManager.swapTiles(pos1, pos2);\n          \n          // 发布交换回退事件\n          this.eventBus.emit(GameEvents.TILE_SWAP_REVERT, {\n            tile1,\n            tile2,\n            pos1,\n            pos2\n          });\n          \n          // 播放回退动画\n          if (this.animationController && sprite1 && sprite2) {\n            await this.animationController.animateSwap(\n              sprite1,\n              sprite2,\n              this.config.animation.swapDuration\n            );\n          } else {\n            // 降级：使用延时模拟\n            await this.delay(this.config.animation.swapDuration);\n          }\n          \n          // 发布无匹配事件\n          this.eventBus.emit(GameEvents.MATCH_NONE);\n        }\n      }\n      \n    } catch (error) {\n      console.error('❌ 交换处理错误:', error);\n      this.eventBus.emit(GameEvents.ERROR, {\n        type: 'SWAP_ERROR',\n        message: '交换处理失败',\n        error\n      });\n    } finally {\n      // 恢复状态\n      this.isProcessing = false;\n      \n      // 切换回游戏状态\n      if (this.stateManager.isState(GameState.ANIMATING)) {\n        this.stateManager.setState(GameState.PLAYING);\n      }\n      \n      // 启用输入\n      this.eventBus.emit(GameEvents.INPUT_ENABLED);\n    }\n  }\n\n  /**\n   * 处理下落和填充（不检测匹配）\n   * @param {RenderEngine} renderEngine - 渲染引擎\n   */\n  async processFallAndFill(renderEngine = null) {\n    // 应用重力（图标下落）\n    const movements = this.boardManager.applyGravity();\n    \n    if (movements.length > 0) {\n      // 发布下落开始事件\n      this.eventBus.emit(GameEvents.TILE_FALL_START, {\n        movements\n      });\n      \n      // 播放下落动画\n      if (this.animationController && renderEngine) {\n        const fallAnimations = movements\n          .map(({ tile, to }) => {\n            const sprite = renderEngine.getTileSprite(tile.id);\n            if (sprite) {\n              const { y: targetY } = renderEngine.gridToScreen(to.x, to.y);\n              return { sprite, targetY };\n            }\n            return null;\n          })\n          .filter(anim => anim !== null);\n        \n        if (fallAnimations.length > 0) {\n          await this.animationController.animateFallBatch(\n            fallAnimations,\n            this.config.animation.fallDuration\n          );\n        }\n      } else {\n        // 降级：使用延时模拟\n        await this.delay(this.config.animation.fallDuration);\n      }\n      \n      // 发布下落完成事件\n      this.eventBus.emit(GameEvents.TILE_FALL_COMPLETE, {\n        movements\n      });\n    }\n    \n    // 填充游戏板（生成新图标）\n    const newTiles = this.boardManager.fillBoard();\n    \n    if (newTiles.length > 0) {\n      // 发布生成开始事件\n      this.eventBus.emit(GameEvents.TILE_SPAWN_START, {\n        tiles: newTiles\n      });\n      \n      // 播放生成动画\n      if (this.animationController && renderEngine) {\n        const newSprites = newTiles\n          .map(tile => renderEngine.getTileSprite(tile.id))\n          .filter(sprite => sprite !== undefined);\n        \n        if (newSprites.length > 0) {\n          await this.animationController.animateSpawnBatch(\n            newSprites,\n            this.config.animation.spawnDuration\n          );\n        }\n      } else {\n        // 降级：使用延时模拟\n        await this.delay(this.config.animation.spawnDuration);\n      }\n      \n      // 发布生成完成事件\n      this.eventBus.emit(GameEvents.TILE_SPAWN_COMPLETE, {\n        tiles: newTiles\n      });\n    }\n  }\n\n  /**\n   * 处理匹配消除流程\n   * @param {RenderEngine} renderEngine - 渲染引擎（可选，用于获取精灵）\n   */\n  async processMatches(renderEngine = null) {\n    let hasMatches = true;\n    \n    while (hasMatches) {\n      // 查找匹配\n      const matches = this.matchDetector.findMatches(this.boardManager);\n      \n      if (matches.length === 0) {\n        hasMatches = false;\n        break;\n      }\n      \n      // 检测是否需要生成特殊图标\n      let specialTileInfo = null;\n      if (this.specialTileManager) {\n        specialTileInfo = this.specialTileManager.detectSpecialTileGeneration(matches);\n        if (specialTileInfo) {\n          console.log(`🌟 检测到特殊图标生成: ${specialTileInfo.type} at (${specialTileInfo.position.x}, ${specialTileInfo.position.y})`);\n        }\n      }\n      \n      // 计算总消除图标数\n      const totalTiles = matches.reduce((sum, match) => sum + match.tiles.length, 0);\n      \n      // 发布匹配发现事件\n      this.eventBus.emit(GameEvents.MATCH_FOUND, {\n        matches,\n        totalTiles,\n        comboCount: this.comboCount,\n        specialTileInfo\n      });\n      \n      // 计算并更新分数\n      const scoreData = this.calculateScore(matches, this.comboCount);\n      this.score += scoreData.score;\n      \n      // 发布分数更新事件\n      this.eventBus.emit(GameEvents.SCORE_UPDATE, {\n        score: this.score,\n        delta: scoreData.score,\n        combo: this.comboCount,\n        basePoints: scoreData.basePoints,\n        multiplier: scoreData.multiplier,\n        tilesCleared: scoreData.tilesCleared\n      });\n      \n      // 如果是连锁，发布连锁事件\n      if (this.comboCount > 1) {\n        this.eventBus.emit(GameEvents.COMBO_TRIGGER, {\n          comboCount: this.comboCount,\n          multiplier: scoreData.multiplier\n        });\n      }\n      \n      // 收集要移除的图标位置\n      const tilesToRemove = [];\n      const tileIdsToRemove = new Set();\n      \n      matches.forEach(match => {\n        match.tiles.forEach(tile => {\n          // 如果这个位置要生成特殊图标，不移除它\n          if (specialTileInfo && \n              tile.x === specialTileInfo.position.x && \n              tile.y === specialTileInfo.position.y) {\n            return;\n          }\n          \n          if (!tileIdsToRemove.has(tile.id)) {\n            tilesToRemove.push(tile);\n            tileIdsToRemove.add(tile.id);\n          }\n        });\n      });\n      \n      // 发布开始移除事件\n      this.eventBus.emit(GameEvents.TILE_REMOVE_START, {\n        tiles: tilesToRemove\n      });\n      \n      // 播放消除动画\n      if (this.animationController && renderEngine) {\n        const sprites = tilesToRemove\n          .map(tile => renderEngine.getTileSprite(tile.id))\n          .filter(sprite => sprite !== undefined);\n        \n        if (sprites.length > 0) {\n          await this.animationController.animateRemove(\n            sprites,\n            this.config.animation.removeDuration\n          );\n        }\n      } else {\n        // 降级：使用延时模拟\n        await this.delay(this.config.animation.removeDuration);\n      }\n      \n      // 从游戏板移除图标\n      const positions = tilesToRemove.map(tile => ({ x: tile.x, y: tile.y }));\n      this.boardManager.removeTiles(positions);\n      \n      // 生成特殊图标（在移除之后）\n      if (specialTileInfo) {\n        const { x, y } = specialTileInfo.position;\n        const tile = this.boardManager.getTile(x, y);\n        if (tile) {\n          this.boardManager.createSpecialTile(x, y, specialTileInfo.type);\n          \n          // 发布特殊图标生成事件\n          this.eventBus.emit('special:tile:created', {\n            tile,\n            specialType: specialTileInfo.type,\n            position: { x, y }\n          });\n        }\n      }\n      \n      // 发布移除完成事件\n      this.eventBus.emit(GameEvents.TILE_REMOVE_COMPLETE, {\n        tiles: tilesToRemove,\n        positions\n      });\n      \n      // 应用重力（图标下落）\n      const movements = this.boardManager.applyGravity();\n      \n      if (movements.length > 0) {\n        // 发布下落开始事件\n        this.eventBus.emit(GameEvents.TILE_FALL_START, {\n          movements\n        });\n        \n        // 播放下落动画\n        if (this.animationController && renderEngine) {\n          const fallAnimations = movements\n            .map(({ tile, to }) => {\n              const sprite = renderEngine.getTileSprite(tile.id);\n              if (sprite) {\n                const { y: targetY } = renderEngine.gridToScreen(to.x, to.y);\n                return { sprite, targetY };\n              }\n              return null;\n            })\n            .filter(anim => anim !== null);\n          \n          if (fallAnimations.length > 0) {\n            await this.animationController.animateFallBatch(\n              fallAnimations,\n              this.config.animation.fallDuration\n            );\n          }\n        } else {\n          // 降级：使用延时模拟\n          await this.delay(this.config.animation.fallDuration);\n        }\n        \n        // 发布下落完成事件\n        this.eventBus.emit(GameEvents.TILE_FALL_COMPLETE, {\n          movements\n        });\n      }\n      \n      // 填充游戏板（生成新图标）\n      const newTiles = this.boardManager.fillBoard();\n      \n      if (newTiles.length > 0) {\n        // 发布生成开始事件\n        this.eventBus.emit(GameEvents.TILE_SPAWN_START, {\n          tiles: newTiles\n        });\n        \n        // 播放生成动画\n        if (this.animationController && renderEngine) {\n          const newSprites = newTiles\n            .map(tile => renderEngine.getTileSprite(tile.id))\n            .filter(sprite => sprite !== undefined);\n          \n          if (newSprites.length > 0) {\n            await this.animationController.animateSpawnBatch(\n              newSprites,\n              this.config.animation.spawnDuration\n            );\n          }\n        } else {\n          // 降级：使用延时模拟\n          await this.delay(this.config.animation.spawnDuration);\n        }\n        \n        // 发布生成完成事件\n        this.eventBus.emit(GameEvents.TILE_SPAWN_COMPLETE, {\n          tiles: newTiles\n        });\n      }\n      \n      // 清除匹配检测器缓存\n      this.matchDetector.clearCache();\n      \n      // 增加连锁计数\n      this.comboCount++;\n      \n      // 继续检测新的匹配（连锁反应）\n    }\n    \n    // 所有匹配处理完成，游戏板稳定\n    this.eventBus.emit(GameEvents.BOARD_STABLE);\n    \n    console.log(`✨ 匹配处理完成，连锁: ${this.comboCount - 1} 次，总分: ${this.score}`);\n    \n    // 检查是否有可用移动\n    await this.checkAndHandleNoMoves();\n  }\n\n  /**\n   * 检查并处理无可用移动的情况\n   */\n  async checkAndHandleNoMoves() {\n    // 检查是否有可用移动\n    const hasValidMoves = this.matchDetector.hasValidMoves(this.boardManager);\n    \n    if (!hasValidMoves) {\n      console.log('⚠️  无可用移动，准备洗牌...');\n      \n      // 发布无可用移动事件\n      this.eventBus.emit(GameEvents.MOVES_NONE);\n      \n      // 显示洗牌提示\n      this.eventBus.emit('board:shuffle:start');\n      \n      // 延迟2秒后洗牌\n      await this.delay(2000);\n      \n      // 执行洗牌\n      this.boardManager.shuffleBoard();\n      \n      // 清除缓存\n      this.matchDetector.clearCache();\n      \n      // 发布洗牌完成事件\n      this.eventBus.emit(GameEvents.BOARD_SHUFFLE, {\n        score: this.score,\n        time: this.remainingTime\n      });\n      \n      console.log('🔀 洗牌完成');\n      \n      // 再次检查是否有可用移动（理论上洗牌后应该有）\n      const hasMovesAfterShuffle = this.matchDetector.hasValidMoves(this.boardManager);\n      if (!hasMovesAfterShuffle) {\n        console.warn('⚠️  洗牌后仍无可用移动，再次洗牌');\n        // 递归调用，直到有可用移动\n        await this.checkAndHandleNoMoves();\n      }\n    }\n  }\n\n  /**\n   * 计算分数\n   * @param {Array<Match>} matches - 匹配数组\n   * @param {number} comboCount - 连锁计数\n   * @returns {Object} 分数数据\n   */\n  calculateScore(matches, comboCount) {\n    const baseScore = this.config.scoring.baseScore; // 10分\n    const comboMultiplier = this.config.scoring.comboMultiplier; // 1.5\n    const match4Bonus = this.config.scoring.match4Bonus; // 20分\n    const match5Bonus = this.config.scoring.match5Bonus; // 50分\n    \n    // 计算总消除图标数\n    const totalTiles = matches.reduce((sum, match) => sum + match.tiles.length, 0);\n    \n    // 基础分数：每个消除的图标10分\n    const basePoints = totalTiles * baseScore;\n    \n    // 连锁倍数：第1次连锁1.0x，第2次1.5x，第3次2.25x，以此类推\n    // 公式：multiplier = comboMultiplier ^ (comboCount - 1)\n    const multiplier = Math.pow(comboMultiplier, comboCount - 1);\n    \n    // 最终分数 = 基础分数 × 连锁倍数\n    let totalScore = Math.floor(basePoints * multiplier);\n    \n    // 额外奖励：4个或5个以上的匹配额外加分\n    for (const match of matches) {\n      if (match.tiles.length === 4) {\n        totalScore += match4Bonus; // 4连额外20分\n      } else if (match.tiles.length >= 5) {\n        totalScore += match5Bonus; // 5连及以上额外50分\n      }\n    }\n    \n    return {\n      score: totalScore,\n      basePoints: basePoints,\n      multiplier: multiplier,\n      comboCount: comboCount,\n      tilesCleared: totalTiles\n    };\n  }\n\n  /**\n   * 检查游戏结束\n   */\n  checkGameOver() {\n    // 检查是否有可用移动\n    const hasValidMoves = this.matchDetector.hasValidMoves(this.boardManager);\n    \n    if (!hasValidMoves) {\n      console.log('❌ 无可用移动');\n      this.eventBus.emit(GameEvents.MOVES_NONE);\n      \n      // 触发游戏结束\n      this.stateManager.setState(GameState.GAME_OVER, {\n        reason: 'no_moves',\n        finalScore: this.score\n      });\n      \n      this.eventBus.emit(GameEvents.GAME_OVER, {\n        reason: 'no_moves',\n        finalScore: this.score,\n        moves: this.moves\n      });\n      \n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * 开始游戏\n   */\n  start() {\n    this.stateManager.setState(GameState.PLAYING);\n    this.startTimer();\n    this.eventBus.emit(GameEvents.GAME_START);\n    this.eventBus.emit(GameEvents.INPUT_ENABLED);\n    console.log('🚀 游戏开始！');\n  }\n\n  /**\n   * 启动计时器\n   */\n  startTimer() {\n    this.isTimerRunning = true;\n    this.remainingTime = this.config.timer.defaultTime;\n    this.eventBus.emit('timer:update', { time: this.remainingTime });\n    console.log('⏱️  计时器启动');\n  }\n\n  /**\n   * 暂停游戏\n   */\n  pause() {\n    if (this.stateManager.isState(GameState.PLAYING)) {\n      this.stateManager.setState(GameState.PAUSED);\n      this.pauseTimer();\n      this.eventBus.emit(GameEvents.INPUT_DISABLED);\n      console.log('⏸️  游戏暂停');\n    }\n  }\n\n  /**\n   * 恢复游戏\n   */\n  resume() {\n    if (this.stateManager.isState(GameState.PAUSED)) {\n      this.stateManager.setState(GameState.PLAYING);\n      this.resumeTimer();\n      this.eventBus.emit(GameEvents.INPUT_ENABLED);\n      console.log('▶️  游戏继续');\n    }\n  }\n\n  /**\n   * 暂停计时器\n   */\n  pauseTimer() {\n    this.isTimerRunning = false;\n    console.log('⏸️  计时器暂停');\n  }\n\n  /**\n   * 恢复计时器\n   */\n  resumeTimer() {\n    this.isTimerRunning = true;\n    console.log('▶️  计时器恢复');\n  }\n\n  /**\n   * 重新开始游戏\n   */\n  restart() {\n    console.log('🔄 重新开始游戏...');\n    this.reset();\n    \n    // 通知渲染引擎重新渲染游戏板\n    this.eventBus.emit('game:board:reset');\n    \n    // 启动游戏\n    this.start();\n  }\n\n  /**\n   * 重置游戏\n   */\n  reset() {\n    // 重置游戏数据\n    this.score = 0;\n    this.moves = 0;\n    this.comboCount = 0;\n    this.isProcessing = false;\n    this.remainingTime = this.config.timer.defaultTime;\n    this.isTimerRunning = false;\n    \n    // 重新创建游戏板\n    this.boardManager.createBoard();\n    this.boardManager.ensureNoInitialMatches();\n    \n    // 清除缓存\n    this.matchDetector.clearCache();\n    \n    // 重置状态\n    this.stateManager.reset();\n    \n    console.log('🔄 游戏已重置');\n  }\n\n  /**\n   * 更新游戏状态（每帧调用）\n   * @param {number} deltaTime - 帧间隔时间（秒）\n   */\n  update(deltaTime) {\n    // 更新计时器\n    if (this.isTimerRunning && this.stateManager.isState(GameState.PLAYING)) {\n      this.remainingTime -= deltaTime;\n      \n      // 发布计时器更新事件\n      this.eventBus.emit('timer:update', { time: Math.max(0, this.remainingTime) });\n      \n      // 检查时间是否用完\n      if (this.remainingTime <= 0) {\n        this.remainingTime = 0;\n        this.isTimerRunning = false;\n        \n        // 触发游戏结束\n        this.stateManager.setState(GameState.GAME_OVER, {\n          reason: 'time_up',\n          finalScore: this.score\n        });\n        \n        this.eventBus.emit(GameEvents.GAME_OVER, {\n          reason: 'time_up',\n          finalScore: this.score,\n          moves: this.moves\n        });\n        \n        console.log('⏰ 时间到！游戏结束');\n      }\n    }\n  }\n\n  /**\n   * 延时辅助函数\n   * @param {number} ms - 延时毫秒数\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * 获取游戏数据\n   */\n  getGameData() {\n    return {\n      score: this.score,\n      moves: this.moves,\n      comboCount: this.comboCount,\n      state: this.stateManager.getCurrentState()\n    };\n  }\n}\n\nexport default GameEngine;\n","/**\n * 图标类 - 表示游戏板上的一个图标\n */\n\n// 图标状态常量\nexport const TileState = {\n  NORMAL: 'normal',       // 正常状态\n  SELECTED: 'selected',   // 被选中\n  MATCHED: 'matched',     // 已匹配待消除\n  FALLING: 'falling',     // 下落中\n  SPAWNING: 'spawning'    // 生成中\n};\n\n// 特殊图标类型常量\nexport const SpecialTileType = {\n  NONE: 'none',           // 普通图标\n  BOMB: 'bomb',           // 炸弹（4连生成）\n  COLOR_BOMB: 'color_bomb', // 彩色炸弹（5连生成）\n  ROW_CLEAR: 'row_clear',   // 横向消除（L/T型生成）\n  COL_CLEAR: 'col_clear'    // 纵向消除（L/T型生成）\n};\n\n/**\n * 图标类\n */\nexport class Tile {\n  /**\n   * 创建图标\n   * @param {number} type - 图标类型 (0-4)\n   * @param {number} x - 网格X坐标\n   * @param {number} y - 网格Y坐标\n   */\n  constructor(type, x, y) {\n    this.type = type;                           // 图标类型\n    this.x = x;                                 // 网格X坐标\n    this.y = y;                                 // 网格Y坐标\n    this.id = Tile.generateId();                // 唯一标识\n    this.state = TileState.NORMAL;              // 当前状态\n    this.isSpecial = false;                     // 是否为特殊图标\n    this.specialType = SpecialTileType.NONE;    // 特殊图标类型\n  }\n\n  /**\n   * 生成唯一ID\n   * @returns {string} 唯一ID\n   */\n  static generateId() {\n    return `tile_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 设置位置\n   * @param {number} x - 网格X坐标\n   * @param {number} y - 网格Y坐标\n   */\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * 设置状态\n   * @param {string} state - 新状态\n   */\n  setState(state) {\n    if (!Object.values(TileState).includes(state)) {\n      console.warn(`无效的图标状态: ${state}`);\n      return;\n    }\n    this.state = state;\n  }\n\n  /**\n   * 设置为特殊图标\n   * @param {string} specialType - 特殊图标类型\n   */\n  setSpecial(specialType) {\n    if (!Object.values(SpecialTileType).includes(specialType)) {\n      console.warn(`无效的特殊图标类型: ${specialType}`);\n      return;\n    }\n    this.isSpecial = true;\n    this.specialType = specialType;\n  }\n\n  /**\n   * 重置为普通图标\n   */\n  resetSpecial() {\n    this.isSpecial = false;\n    this.specialType = SpecialTileType.NONE;\n  }\n\n  /**\n   * 检查是否为普通图标\n   * @returns {boolean}\n   */\n  isNormal() {\n    return !this.isSpecial;\n  }\n\n  /**\n   * 克隆图标\n   * @returns {Tile} 新的图标实例\n   */\n  clone() {\n    const cloned = new Tile(this.type, this.x, this.y);\n    cloned.state = this.state;\n    cloned.isSpecial = this.isSpecial;\n    cloned.specialType = this.specialType;\n    return cloned;\n  }\n\n  /**\n   * 转换为字符串（用于调试）\n   * @returns {string}\n   */\n  toString() {\n    const special = this.isSpecial ? ` [${this.specialType}]` : '';\n    return `Tile(type=${this.type}, pos=(${this.x},${this.y}), state=${this.state}${special})`;\n  }\n\n  /**\n   * 转换为JSON对象\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      type: this.type,\n      x: this.x,\n      y: this.y,\n      state: this.state,\n      isSpecial: this.isSpecial,\n      specialType: this.specialType\n    };\n  }\n}\n\nexport default Tile;\n","/**\n * 游戏板管理器 - 管理游戏板的数据结构和基本操作\n */\n\nimport { Tile } from './Tile.js';\n\n/**\n * 游戏板管理器类\n */\nexport class BoardManager {\n  /**\n   * 创建游戏板管理器\n   * @param {number} rows - 行数\n   * @param {number} cols - 列数\n   * @param {number} tileTypes - 图标类型数量\n   * @param {Object} matchDetector - 匹配检测器实例（可选，用于初始化检测）\n   */\n  constructor(rows, cols, tileTypes, matchDetector = null) {\n    this.rows = rows;\n    this.cols = cols;\n    this.tileTypes = tileTypes;\n    this.matchDetector = matchDetector;\n    this.grid = [];  // 二维数组存储Tile\n  }\n\n  /**\n   * 创建游戏板并随机填充图标\n   * @returns {Tile[][]} 游戏板网格\n   */\n  createBoard() {\n    this.grid = [];\n    \n    for (let y = 0; y < this.rows; y++) {\n      this.grid[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        const type = this._getRandomType();\n        this.grid[y][x] = new Tile(type, x, y);\n      }\n    }\n\n    return this.grid;\n  }\n\n  /**\n   * 获取随机图标类型\n   * @returns {number} 图标类型 (0 到 tileTypes-1)\n   */\n  _getRandomType() {\n    return Math.floor(Math.random() * this.tileTypes);\n  }\n\n  /**\n   * 获取指定位置的图标\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @returns {Tile|null} 图标对象，如果位置无效返回null\n   */\n  getTile(x, y) {\n    if (!this.isValidPosition(x, y)) {\n      return null;\n    }\n    return this.grid[y][x];\n  }\n\n  /**\n   * 设置指定位置的图标\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {Tile} tile - 图标对象\n   */\n  setTile(x, y, tile) {\n    if (!this.isValidPosition(x, y)) {\n      console.warn(`尝试在无效位置设置图标: (${x}, ${y})`);\n      return;\n    }\n    \n    if (tile) {\n      tile.setPosition(x, y);\n    }\n    \n    this.grid[y][x] = tile;\n  }\n\n  /**\n   * 检查位置是否有效\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @returns {boolean} 是否有效\n   */\n  isValidPosition(x, y) {\n    return x >= 0 && x < this.cols && y >= 0 && y < this.rows;\n  }\n\n  /**\n   * 检查两个位置是否相邻（水平或垂直）\n   * @param {Object} pos1 - 位置1 {x, y}\n   * @param {Object} pos2 - 位置2 {x, y}\n   * @returns {boolean} 是否相邻\n   */\n  isAdjacent(pos1, pos2) {\n    const dx = Math.abs(pos1.x - pos2.x);\n    const dy = Math.abs(pos1.y - pos2.y);\n    \n    // 相邻条件：横向或纵向距离为1，且另一方向距离为0\n    return (dx === 1 && dy === 0) || (dx === 0 && dy === 1);\n  }\n\n  /**\n   * 交换两个图标的位置\n   * @param {Object} pos1 - 位置1 {x, y}\n   * @param {Object} pos2 - 位置2 {x, y}\n   * @returns {boolean} 是否交换成功\n   */\n  swapTiles(pos1, pos2) {\n    if (!this.isValidPosition(pos1.x, pos1.y) || !this.isValidPosition(pos2.x, pos2.y)) {\n      return false;\n    }\n\n    const tile1 = this.getTile(pos1.x, pos1.y);\n    const tile2 = this.getTile(pos2.x, pos2.y);\n\n    if (!tile1 || !tile2) {\n      return false;\n    }\n\n    // 交换位置\n    this.setTile(pos1.x, pos1.y, tile2);\n    this.setTile(pos2.x, pos2.y, tile1);\n\n    return true;\n  }\n\n  /**\n   * 移除指定位置的图标\n   * @param {Array<{x, y}>} positions - 位置数组\n   */\n  removeTiles(positions) {\n    positions.forEach(pos => {\n      if (this.isValidPosition(pos.x, pos.y)) {\n        this.grid[pos.y][pos.x] = null;\n      }\n    });\n  }\n\n  /**\n   * 获取所有空位置\n   * @returns {Array<{x, y}>} 空位置数组\n   */\n  getEmptyPositions() {\n    const emptyPositions = [];\n    \n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.grid[y][x] === null) {\n          emptyPositions.push({ x, y });\n        }\n      }\n    }\n    \n    return emptyPositions;\n  }\n\n  /**\n   * 应用重力使图标下落\n   * @returns {Array<{tile, from, to}>} 移动记录数组\n   */\n  applyGravity() {\n    const movements = [];\n\n    // 从下往上遍历每一列\n    for (let x = 0; x < this.cols; x++) {\n      let writeY = this.rows - 1;  // 写入位置（从底部开始）\n\n      // 从下往上扫描\n      for (let y = this.rows - 1; y >= 0; y--) {\n        const tile = this.grid[y][x];\n        \n        if (tile !== null) {\n          // 如果当前位置不是写入位置，说明需要下落\n          if (y !== writeY) {\n            const from = { x, y };\n            const to = { x, y: writeY };\n            \n            movements.push({ tile, from, to });\n            \n            // 移动图标\n            this.grid[writeY][x] = tile;\n            this.grid[y][x] = null;\n            tile.setPosition(x, writeY);\n          }\n          \n          writeY--;  // 写入位置上移\n        }\n      }\n    }\n\n    return movements;\n  }\n\n  /**\n   * 填充游戏板（在顶部生成新图标）\n   * @returns {Array<Tile>} 新生成的图标数组\n   */\n  fillBoard() {\n    const newTiles = [];\n\n    for (let x = 0; x < this.cols; x++) {\n      for (let y = 0; y < this.rows; y++) {\n        if (this.grid[y][x] === null) {\n          const type = this._getRandomType();\n          const tile = new Tile(type, x, y);\n          this.grid[y][x] = tile;\n          newTiles.push(tile);\n        }\n      }\n    }\n\n    return newTiles;\n  }\n\n  /**\n   * 确保初始化时无匹配\n   * 使用智能替换算法，最多尝试100次\n   * @returns {boolean} 是否成功消除所有初始匹配\n   */\n  ensureNoInitialMatches() {\n    if (!this.matchDetector) {\n      console.warn('未提供匹配检测器，跳过初始匹配检测');\n      return true;\n    }\n\n    const maxAttempts = 100;\n    let attempts = 0;\n\n    while (attempts < maxAttempts) {\n      const matches = this.matchDetector.findMatches(this);\n\n      if (matches.length === 0) {\n        return true;  // 成功：无匹配\n      }\n\n      // 策略：只替换匹配的图标，而不是重新生成整个棋盘\n      for (const match of matches) {\n        for (const tile of match.tiles) {\n          let newType;\n          let safeType = false;\n\n          // 尝试找到一个不会产生新匹配的类型\n          for (let i = 0; i < this.tileTypes; i++) {\n            newType = i;\n            tile.type = newType;\n\n            // 检查这个位置是否还会产生匹配\n            if (!this.wouldCreateMatch(tile.x, tile.y)) {\n              safeType = true;\n              break;\n            }\n          }\n\n          // 如果所有类型都会产生匹配，随机选择一个\n          if (!safeType) {\n            tile.type = this._getRandomType();\n          }\n        }\n      }\n\n      attempts++;\n    }\n\n    // 如果100次尝试后仍有匹配，强制重新生成整个棋盘\n    console.warn('100次尝试后仍有初始匹配，重新生成棋盘');\n    this.createBoard();\n    return this.ensureNoInitialMatches();\n  }\n\n  /**\n   * 检查指定位置是否会产生匹配\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @returns {boolean} 是否会产生匹配\n   */\n  wouldCreateMatch(x, y) {\n    const tile = this.getTile(x, y);\n    // ✅ 特殊图标不参与匹配\n    if (!tile || tile.isSpecial) return false;\n\n    // 检查横向\n    let horizontalCount = 1;\n    \n    // 向左检查\n    for (let i = x - 1; i >= 0; i--) {\n      const leftTile = this.getTile(i, y);\n      // ✅ 跳过特殊图标\n      if (leftTile && !leftTile.isSpecial && leftTile.type === tile.type) {\n        horizontalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    // 向右检查\n    for (let i = x + 1; i < this.cols; i++) {\n      const rightTile = this.getTile(i, y);\n      // ✅ 跳过特殊图标\n      if (rightTile && !rightTile.isSpecial && rightTile.type === tile.type) {\n        horizontalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    if (horizontalCount >= 3) return true;\n\n    // 检查纵向\n    let verticalCount = 1;\n    \n    // 向上检查\n    for (let i = y - 1; i >= 0; i--) {\n      const upTile = this.getTile(x, i);\n      // ✅ 跳过特殊图标\n      if (upTile && !upTile.isSpecial && upTile.type === tile.type) {\n        verticalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    // 向下检查\n    for (let i = y + 1; i < this.rows; i++) {\n      const downTile = this.getTile(x, i);\n      // ✅ 跳过特殊图标\n      if (downTile && !downTile.isSpecial && downTile.type === tile.type) {\n        verticalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    if (verticalCount >= 3) return true;\n\n    return false;\n  }\n\n  /**\n   * 洗牌游戏板\n   */\n  shuffleBoard() {\n    // 收集所有图标类型\n    const types = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        const tile = this.grid[y][x];\n        if (tile) {\n          types.push(tile.type);\n        }\n      }\n    }\n\n    // Fisher-Yates 洗牌算法\n    for (let i = types.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [types[i], types[j]] = [types[j], types[i]];\n    }\n\n    // 重新分配类型\n    let index = 0;\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        const tile = this.grid[y][x];\n        if (tile) {\n          tile.type = types[index++];\n        }\n      }\n    }\n\n    // 确保洗牌后无初始匹配\n    this.ensureNoInitialMatches();\n  }\n\n  /**\n   * 创建特殊图标\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {string} specialType - 特殊图标类型\n   * @returns {Tile|null} 创建的特殊图标\n   */\n  createSpecialTile(x, y, specialType) {\n    if (!this.isValidPosition(x, y)) {\n      console.warn(`尝试在无效位置创建特殊图标: (${x}, ${y})`);\n      return null;\n    }\n\n    const tile = this.getTile(x, y);\n    if (tile) {\n      tile.setSpecial(specialType);\n      console.log(`✨ 创建特殊图标: ${specialType} at (${x}, ${y})`);\n      return tile;\n    }\n\n    return null;\n  }\n\n  /**\n   * 克隆游戏板（用于检测）\n   * @returns {BoardManager} 新的游戏板实例\n   */\n  clone() {\n    const cloned = new BoardManager(this.rows, this.cols, this.tileTypes, this.matchDetector);\n    cloned.grid = [];\n\n    for (let y = 0; y < this.rows; y++) {\n      cloned.grid[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        const tile = this.grid[y][x];\n        cloned.grid[y][x] = tile ? tile.clone() : null;\n      }\n    }\n\n    return cloned;\n  }\n\n  /**\n   * 获取游戏板的字符串表示（用于调试）\n   * @returns {string}\n   */\n  toString() {\n    let str = '\\n游戏板状态:\\n';\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        const tile = this.grid[y][x];\n        str += tile ? tile.type : '-';\n        str += ' ';\n      }\n      str += '\\n';\n    }\n    return str;\n  }\n}\n\nexport default BoardManager;\n","/**\n * 匹配检测器 - 检测游戏板上的匹配模式\n */\n\n/**\n * 匹配类 - 存储匹配信息\n */\nexport class Match {\n  /**\n   * 创建匹配对象\n   * @param {Array<Tile>} tiles - 匹配的图标数组\n   * @param {string} direction - 匹配方向 ('horizontal' | 'vertical')\n   */\n  constructor(tiles, direction) {\n    this.tiles = tiles;           // 匹配的图标数组\n    this.direction = direction;   // 匹配方向\n    this.length = tiles.length;   // 匹配长度\n  }\n\n  /**\n   * 获取匹配的位置数组\n   * @returns {Array<{x, y}>}\n   */\n  getPositions() {\n    return this.tiles.map(tile => ({ x: tile.x, y: tile.y }));\n  }\n\n  /**\n   * 获取匹配的类型\n   * @returns {number}\n   */\n  getType() {\n    return this.tiles.length > 0 ? this.tiles[0].type : -1;\n  }\n}\n\n/**\n * 匹配检测器类\n */\nexport class MatchDetector {\n  constructor() {\n    // 缓存相关\n    this.validMovesCache = null;\n    this.boardStateHash = null;\n  }\n\n  /**\n   * 查找所有匹配\n   * @param {BoardManager} board - 游戏板\n   * @returns {Array<Match>} 匹配数组\n   */\n  findMatches(board) {\n    const matches = [];\n    const matchedTiles = new Set();  // 用于去重\n\n    // 查找横向匹配\n    const horizontalMatches = this.findHorizontalMatches(board);\n    horizontalMatches.forEach(match => {\n      matches.push(match);\n      match.tiles.forEach(tile => matchedTiles.add(`${tile.x},${tile.y}`));\n    });\n\n    // 查找纵向匹配\n    const verticalMatches = this.findVerticalMatches(board);\n    verticalMatches.forEach(match => {\n      matches.push(match);\n      match.tiles.forEach(tile => matchedTiles.add(`${tile.x},${tile.y}`));\n    });\n\n    return matches;\n  }\n\n  /**\n   * 查找横向匹配\n   * @param {BoardManager} board - 游戏板\n   * @returns {Array<Match>} 横向匹配数组\n   */\n  findHorizontalMatches(board) {\n    const matches = [];\n\n    for (let y = 0; y < board.rows; y++) {\n      let currentType = -1;\n      let currentMatch = [];\n\n      for (let x = 0; x < board.cols; x++) {\n        const tile = board.getTile(x, y);\n\n        // ✅ 跳过空位和特殊图标（特殊图标不参与匹配）\n        if (!tile || tile.isSpecial) {\n          // 遇到空位或特殊图标，检查当前匹配\n          if (currentMatch.length >= 3) {\n            matches.push(new Match(currentMatch, 'horizontal'));\n          }\n          currentMatch = [];\n          currentType = -1;\n          continue;\n        }\n\n        if (tile.type === currentType) {\n          // 相同类型，添加到当前匹配\n          currentMatch.push(tile);\n        } else {\n          // 不同类型，检查当前匹配\n          if (currentMatch.length >= 3) {\n            matches.push(new Match(currentMatch, 'horizontal'));\n          }\n          // 开始新的匹配\n          currentMatch = [tile];\n          currentType = tile.type;\n        }\n      }\n\n      // 检查行末的匹配\n      if (currentMatch.length >= 3) {\n        matches.push(new Match(currentMatch, 'horizontal'));\n      }\n    }\n\n    return matches;\n  }\n\n  /**\n   * 查找纵向匹配\n   * @param {BoardManager} board - 游戏板\n   * @returns {Array<Match>} 纵向匹配数组\n   */\n  findVerticalMatches(board) {\n    const matches = [];\n\n    for (let x = 0; x < board.cols; x++) {\n      let currentType = -1;\n      let currentMatch = [];\n\n      for (let y = 0; y < board.rows; y++) {\n        const tile = board.getTile(x, y);\n\n        // ✅ 跳过空位和特殊图标（特殊图标不参与匹配）\n        if (!tile || tile.isSpecial) {\n          // 遇到空位或特殊图标，检查当前匹配\n          if (currentMatch.length >= 3) {\n            matches.push(new Match(currentMatch, 'vertical'));\n          }\n          currentMatch = [];\n          currentType = -1;\n          continue;\n        }\n\n        if (tile.type === currentType) {\n          // 相同类型，添加到当前匹配\n          currentMatch.push(tile);\n        } else {\n          // 不同类型，检查当前匹配\n          if (currentMatch.length >= 3) {\n            matches.push(new Match(currentMatch, 'vertical'));\n          }\n          // 开始新的匹配\n          currentMatch = [tile];\n          currentType = tile.type;\n        }\n      }\n\n      // 检查列末的匹配\n      if (currentMatch.length >= 3) {\n        matches.push(new Match(currentMatch, 'vertical'));\n      }\n    }\n\n    return matches;\n  }\n\n  /**\n   * 快速检查指定位置是否有匹配（只检查该位置，不扫描整个棋盘）\n   * @param {BoardManager} board - 游戏板\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @returns {boolean} 是否有匹配\n   */\n  checkMatchAtPosition(board, x, y) {\n    const tile = board.getTile(x, y);\n    // ✅ 特殊图标不参与匹配\n    if (!tile || tile.isSpecial) return false;\n\n    // 检查横向匹配\n    let horizontalCount = 1;\n    \n    // 向左检查\n    for (let i = x - 1; i >= 0; i--) {\n      const leftTile = board.getTile(i, y);\n      // ✅ 跳过特殊图标\n      if (leftTile && !leftTile.isSpecial && leftTile.type === tile.type) {\n        horizontalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    // 向右检查\n    for (let i = x + 1; i < board.cols; i++) {\n      const rightTile = board.getTile(i, y);\n      // ✅ 跳过特殊图标\n      if (rightTile && !rightTile.isSpecial && rightTile.type === tile.type) {\n        horizontalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    if (horizontalCount >= 3) return true;\n\n    // 检查纵向匹配\n    let verticalCount = 1;\n    \n    // 向上检查\n    for (let i = y - 1; i >= 0; i--) {\n      const upTile = board.getTile(x, i);\n      // ✅ 跳过特殊图标\n      if (upTile && !upTile.isSpecial && upTile.type === tile.type) {\n        verticalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    // 向下检查\n    for (let i = y + 1; i < board.rows; i++) {\n      const downTile = board.getTile(x, i);\n      // ✅ 跳过特殊图标\n      if (downTile && !downTile.isSpecial && downTile.type === tile.type) {\n        verticalCount++;\n      } else {\n        break;\n      }\n    }\n    \n    if (verticalCount >= 3) return true;\n\n    return false;\n  }\n\n  /**\n   * 检查是否有有效移动（优化版本，提前终止 + 缓存）\n   * @param {BoardManager} board - 游戏板\n   * @returns {boolean} 是否有有效移动\n   */\n  hasValidMoves(board) {\n    // 检查缓存\n    const boardHash = this.getBoardHash(board);\n    if (this.validMovesCache !== null && this.boardStateHash === boardHash) {\n      return this.validMovesCache;\n    }\n\n    const { rows, cols } = board;\n\n    // 遍历所有可能的交换\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        const tile = board.getTile(x, y);\n        if (!tile) continue;\n\n        // 只检查右侧和下方的交换（避免重复检查）\n        const adjacentPositions = [\n          { x: x + 1, y: y },     // 右\n          { x: x, y: y + 1 }      // 下\n        ];\n\n        for (const adj of adjacentPositions) {\n          if (!board.isValidPosition(adj.x, adj.y)) continue;\n\n          const adjTile = board.getTile(adj.x, adj.y);\n          if (!adjTile) continue;\n\n          // 模拟交换\n          board.swapTiles({ x, y }, adj);\n\n          // 快速检查：只检查交换的两个位置周围是否产生匹配\n          const hasMatch = this.checkMatchAtPosition(board, x, y) ||\n                          this.checkMatchAtPosition(board, adj.x, adj.y);\n\n          // 交换回来\n          board.swapTiles({ x, y }, adj);\n\n          if (hasMatch) {\n            // 缓存结果\n            this.validMovesCache = true;\n            this.boardStateHash = boardHash;\n            return true; // 找到有效移动，立即返回\n          }\n        }\n      }\n    }\n\n    // 缓存结果\n    this.validMovesCache = false;\n    this.boardStateHash = boardHash;\n    return false; // 无有效移动\n  }\n\n  /**\n   * 查找所有可能的移动\n   * @param {BoardManager} board - 游戏板\n   * @returns {Array<{from, to}>} 可能的移动数组\n   */\n  findPossibleMoves(board) {\n    const possibleMoves = [];\n    const { rows, cols } = board;\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        const tile = board.getTile(x, y);\n        if (!tile) continue;\n\n        // 检查右侧和下方的交换\n        const adjacentPositions = [\n          { x: x + 1, y: y },\n          { x: x, y: y + 1 }\n        ];\n\n        for (const adj of adjacentPositions) {\n          if (!board.isValidPosition(adj.x, adj.y)) continue;\n\n          const adjTile = board.getTile(adj.x, adj.y);\n          if (!adjTile) continue;\n\n          // 模拟交换\n          board.swapTiles({ x, y }, adj);\n\n          // 检查是否产生匹配\n          const hasMatch = this.checkMatchAtPosition(board, x, y) ||\n                          this.checkMatchAtPosition(board, adj.x, adj.y);\n\n          // 交换回来\n          board.swapTiles({ x, y }, adj);\n\n          if (hasMatch) {\n            possibleMoves.push({\n              from: { x, y },\n              to: adj\n            });\n          }\n        }\n      }\n    }\n\n    return possibleMoves;\n  }\n\n  /**\n   * 生成游戏板哈希值（用于缓存）\n   * @param {BoardManager} board - 游戏板\n   * @returns {string} 哈希值\n   */\n  getBoardHash(board) {\n    let hash = '';\n    for (let y = 0; y < board.rows; y++) {\n      for (let x = 0; x < board.cols; x++) {\n        const tile = board.getTile(x, y);\n        hash += tile ? tile.type : '-';\n      }\n    }\n    return hash;\n  }\n\n  /**\n   * 清除缓存（在游戏板变化时调用）\n   */\n  clearCache() {\n    this.validMovesCache = null;\n    this.boardStateHash = null;\n  }\n}\n\nexport default MatchDetector;\n","/**\n * 特殊图标管理器 - 管理特殊图标的生成和激活\n */\n\nimport { SpecialTileType } from './Tile.js';\n\n/**\n * 特殊图标管理器类\n */\nexport class SpecialTileManager {\n  /**\n   * 创建特殊图标管理器\n   * @param {Object} config - 游戏配置\n   * @param {BoardManager} boardManager - 游戏板管理器\n   */\n  constructor(config, boardManager) {\n    this.config = config;\n    this.boardManager = boardManager;\n  }\n\n  /**\n   * 检测匹配并确定是否生成特殊图标\n   * @param {Array<Match>} matches - 匹配数组\n   * @returns {Object|null} 特殊图标信息 {type, position} 或 null\n   */\n  detectSpecialTileGeneration(matches) {\n    if (matches.length === 0) return null;\n\n    // 按匹配长度排序，优先处理最长的匹配\n    const sortedMatches = [...matches].sort((a, b) => b.length - a.length);\n\n    for (const match of sortedMatches) {\n      // 5连或更多：生成彩色炸弹\n      if (match.length >= 5) {\n        const centerPos = this._getMatchCenter(match);\n        return {\n          type: SpecialTileType.COLOR_BOMB,\n          position: centerPos,\n          matchType: match.direction,\n          matchLength: match.length\n        };\n      }\n\n      // 4连：生成炸弹\n      if (match.length === 4) {\n        const centerPos = this._getMatchCenter(match);\n        return {\n          type: SpecialTileType.BOMB,\n          position: centerPos,\n          matchType: match.direction,\n          matchLength: match.length\n        };\n      }\n    }\n\n    // 检测L型或T型匹配（多个匹配重叠）\n    const lShapeInfo = this._detectLShapeMatch(matches);\n    if (lShapeInfo) {\n      return lShapeInfo;\n    }\n\n    return null;\n  }\n\n  /**\n   * 获取匹配的中心位置\n   * @param {Match} match - 匹配对象\n   * @returns {{x, y}} 中心位置\n   */\n  _getMatchCenter(match) {\n    const tiles = match.tiles;\n    const centerIndex = Math.floor(tiles.length / 2);\n    return {\n      x: tiles[centerIndex].x,\n      y: tiles[centerIndex].y\n    };\n  }\n\n  /**\n   * 检测L型或T型匹配\n   * @param {Array<Match>} matches - 匹配数组\n   * @returns {Object|null} 特殊图标信息或null\n   */\n  _detectLShapeMatch(matches) {\n    if (matches.length < 2) return null;\n\n    // 查找重叠的匹配（横向和纵向交叉）\n    for (let i = 0; i < matches.length; i++) {\n      for (let j = i + 1; j < matches.length; j++) {\n        const match1 = matches[i];\n        const match2 = matches[j];\n\n        // 必须是不同方向的匹配\n        if (match1.direction === match2.direction) continue;\n\n        // 查找交叉点\n        const intersection = this._findIntersection(match1, match2);\n        if (intersection) {\n          // 根据匹配方向决定生成横向还是纵向消除\n          const specialType = match1.direction === 'horizontal' \n            ? SpecialTileType.ROW_CLEAR \n            : SpecialTileType.COL_CLEAR;\n\n          return {\n            type: specialType,\n            position: intersection,\n            matchType: 'L_SHAPE',\n            matchLength: match1.length + match2.length\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * 查找两个匹配的交叉点\n   * @param {Match} match1 - 匹配1\n   * @param {Match} match2 - 匹配2\n   * @returns {{x, y}|null} 交叉点位置或null\n   */\n  _findIntersection(match1, match2) {\n    for (const tile1 of match1.tiles) {\n      for (const tile2 of match2.tiles) {\n        if (tile1.x === tile2.x && tile1.y === tile2.y) {\n          return { x: tile1.x, y: tile1.y };\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 创建特殊图标\n   * @param {number} type - 普通图标类型\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {string} specialType - 特殊图标类型\n   * @returns {Tile} 特殊图标\n   */\n  createSpecialTile(type, x, y, specialType) {\n    const tile = this.boardManager.getTile(x, y);\n    if (tile) {\n      tile.setSpecial(specialType);\n      return tile;\n    }\n    return null;\n  }\n\n  /**\n   * 检测特殊图标激活\n   * @param {Tile} tile - 被激活的特殊图标\n   * @param {Tile} swappedTile - 交换的图标（用于彩色炸弹）\n   * @returns {Array<{x, y}>} 要消除的位置数组\n   */\n  detectSpecialTileActivation(tile, swappedTile = null) {\n    if (!tile.isSpecial) return [];\n\n    let positions = [];\n\n    switch (tile.specialType) {\n      case SpecialTileType.BOMB:\n        positions = this._getBombRange(tile.x, tile.y);\n        break;\n      \n      case SpecialTileType.COLOR_BOMB:\n        positions = this._getColorBombTargets(swappedTile);\n        // ✅ 彩色炸弹本身也要被消除\n        positions.push({ x: tile.x, y: tile.y });\n        break;\n      \n      case SpecialTileType.ROW_CLEAR:\n        positions = this._getRowTargets(tile.y);\n        break;\n      \n      case SpecialTileType.COL_CLEAR:\n        positions = this._getColTargets(tile.x);\n        break;\n      \n      default:\n        return [];\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取炸弹范围（3x3）\n   * @param {number} x - 中心X坐标\n   * @param {number} y - 中心Y坐标\n   * @returns {Array<{x, y}>} 位置数组\n   */\n  _getBombRange(x, y) {\n    const positions = [];\n    const range = this.config.specialTiles.bomb.effectRange; // 1\n\n    for (let dy = -range; dy <= range; dy++) {\n      for (let dx = -range; dx <= range; dx++) {\n        const newX = x + dx;\n        const newY = y + dy;\n        \n        if (this.boardManager.isValidPosition(newX, newY)) {\n          positions.push({ x: newX, y: newY });\n        }\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取彩色炸弹目标（所有相同类型）\n   * @param {Tile} targetTile - 目标图标\n   * @returns {Array<{x, y}>} 位置数组\n   */\n  _getColorBombTargets(targetTile) {\n    if (!targetTile) return [];\n\n    const positions = [];\n    const targetType = targetTile.type;\n\n    for (let y = 0; y < this.boardManager.rows; y++) {\n      for (let x = 0; x < this.boardManager.cols; x++) {\n        const tile = this.boardManager.getTile(x, y);\n        // ✅ 包含所有相同类型的图标（包括普通图标和特殊图标）\n        if (tile && tile.type === targetType) {\n          positions.push({ x, y });\n        }\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取整行目标\n   * @param {number} y - 行号\n   * @returns {Array<{x, y}>} 位置数组\n   */\n  _getRowTargets(y) {\n    const positions = [];\n    \n    for (let x = 0; x < this.boardManager.cols; x++) {\n      if (this.boardManager.getTile(x, y)) {\n        positions.push({ x, y });\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取整列目标\n   * @param {number} x - 列号\n   * @returns {Array<{x, y}>} 位置数组\n   */\n  _getColTargets(x) {\n    const positions = [];\n    \n    for (let y = 0; y < this.boardManager.rows; y++) {\n      if (this.boardManager.getTile(x, y)) {\n        positions.push({ x, y });\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 检测特殊图标组合效果\n   * @param {Tile} tile1 - 特殊图标1\n   * @param {Tile} tile2 - 特殊图标2\n   * @returns {Object|null} 组合效果信息\n   */\n  detectSpecialCombo(tile1, tile2) {\n    if (!tile1.isSpecial || !tile2.isSpecial) return null;\n\n    const combo = {\n      type: 'combo',\n      positions: [],\n      multiplier: 5\n    };\n\n    // 炸弹 + 炸弹 = 5x5范围\n    if (tile1.specialType === SpecialTileType.BOMB && \n        tile2.specialType === SpecialTileType.BOMB) {\n      combo.positions = this._getLargeExplosion(tile1.x, tile1.y, 2);\n      combo.description = '双炸弹组合：5x5爆炸';\n    }\n    // 炸弹 + 横向/纵向消除 = 3行或3列\n    else if ((tile1.specialType === SpecialTileType.BOMB && \n              (tile2.specialType === SpecialTileType.ROW_CLEAR || \n               tile2.specialType === SpecialTileType.COL_CLEAR)) ||\n             (tile2.specialType === SpecialTileType.BOMB && \n              (tile1.specialType === SpecialTileType.ROW_CLEAR || \n               tile1.specialType === SpecialTileType.COL_CLEAR))) {\n      const lineClearTile = tile1.specialType === SpecialTileType.BOMB ? tile2 : tile1;\n      const bombTile = tile1.specialType === SpecialTileType.BOMB ? tile1 : tile2;\n      \n      if (lineClearTile.specialType === SpecialTileType.ROW_CLEAR) {\n        // 3行消除\n        combo.positions = this._getMultipleRows(bombTile.y, 1);\n        combo.description = '炸弹+横向消除：3行爆炸';\n      } else {\n        // 3列消除\n        combo.positions = this._getMultipleCols(bombTile.x, 1);\n        combo.description = '炸弹+纵向消除：3列爆炸';\n      }\n    }\n    // 彩色炸弹 + 任何特殊图标 = 将所有该类型转换为特殊图标\n    else if (tile1.specialType === SpecialTileType.COLOR_BOMB || \n             tile2.specialType === SpecialTileType.COLOR_BOMB) {\n      combo.type = 'color_bomb_combo';\n      combo.description = '彩色炸弹组合：超级爆炸';\n      // 彩色炸弹组合：消除整个棋盘\n      for (let y = 0; y < this.boardManager.rows; y++) {\n        for (let x = 0; x < this.boardManager.cols; x++) {\n          if (this.boardManager.getTile(x, y)) {\n            combo.positions.push({ x, y });\n          }\n        }\n      }\n    }\n    // 横向 + 纵向消除 = 十字消除\n    else if ((tile1.specialType === SpecialTileType.ROW_CLEAR && \n              tile2.specialType === SpecialTileType.COL_CLEAR) ||\n             (tile1.specialType === SpecialTileType.COL_CLEAR && \n              tile2.specialType === SpecialTileType.ROW_CLEAR)) {\n      const rowTile = tile1.specialType === SpecialTileType.ROW_CLEAR ? tile1 : tile2;\n      const colTile = tile1.specialType === SpecialTileType.COL_CLEAR ? tile1 : tile2;\n      \n      combo.positions = [\n        ...this._getRowTargets(rowTile.y),\n        ...this._getColTargets(colTile.x)\n      ];\n      combo.description = '十字消除：整行+整列';\n    }\n\n    return combo.positions.length > 0 ? combo : null;\n  }\n\n  /**\n   * 获取大范围爆炸\n   * @param {number} x - 中心X\n   * @param {number} y - 中心Y\n   * @param {number} range - 范围\n   * @returns {Array<{x, y}>}\n   */\n  _getLargeExplosion(x, y, range) {\n    const positions = [];\n\n    for (let dy = -range; dy <= range; dy++) {\n      for (let dx = -range; dx <= range; dx++) {\n        const newX = x + dx;\n        const newY = y + dy;\n        \n        if (this.boardManager.isValidPosition(newX, newY)) {\n          positions.push({ x: newX, y: newY });\n        }\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取多行\n   * @param {number} centerY - 中心行\n   * @param {number} range - 范围\n   * @returns {Array<{x, y}>}\n   */\n  _getMultipleRows(centerY, range) {\n    const positions = [];\n\n    for (let dy = -range; dy <= range; dy++) {\n      const y = centerY + dy;\n      if (y >= 0 && y < this.boardManager.rows) {\n        positions.push(...this._getRowTargets(y));\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 获取多列\n   * @param {number} centerX - 中心列\n   * @param {number} range - 范围\n   * @returns {Array<{x, y}>}\n   */\n  _getMultipleCols(centerX, range) {\n    const positions = [];\n\n    for (let dx = -range; dx <= range; dx++) {\n      const x = centerX + dx;\n      if (x >= 0 && x < this.boardManager.cols) {\n        positions.push(...this._getColTargets(x));\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * 计算特殊图标消除的额外分数\n   * @param {string} specialType - 特殊图标类型\n   * @param {number} tilesCleared - 消除的图标数量\n   * @returns {number} 额外分数\n   */\n  calculateSpecialBonus(specialType, tilesCleared) {\n    const baseScore = this.config.scoring.baseScore;\n    const multiplier = this.config.scoring.specialTileMultiplier;\n\n    let bonus = 0;\n\n    switch (specialType) {\n      case SpecialTileType.BOMB:\n        bonus = tilesCleared * baseScore * 2;\n        break;\n      case SpecialTileType.COLOR_BOMB:\n        bonus = tilesCleared * baseScore * 5;\n        break;\n      case SpecialTileType.ROW_CLEAR:\n      case SpecialTileType.COL_CLEAR:\n        bonus = tilesCleared * baseScore * 3;\n        break;\n    }\n\n    return Math.floor(bonus);\n  }\n}\n\nexport default SpecialTileManager;\n","/**\n * 粒子类 - 单个粒子的数据和行为\n */\n\n/**\n * 粒子类\n */\nexport class Particle {\n  /**\n   * 创建粒子\n   * @param {PIXI.Sprite} sprite - PixiJS 精灵对象\n   */\n  constructor(sprite) {\n    this.sprite = sprite;\n    this.velocity = { x: 0, y: 0 };\n    this.acceleration = { x: 0, y: 0 };\n    this.lifetime = 1.0;\n    this.age = 0;\n    this.initialScale = 1.0;\n    this.initialAlpha = 1.0;\n    this.isAlive = true;\n  }\n\n  /**\n   * 初始化粒子（用于对象池复用）\n   * @param {Object} config - 粒子配置\n   */\n  init(config) {\n    const {\n      x = 0,\n      y = 0,\n      velocityX = 0,\n      velocityY = 0,\n      accelerationX = 0,\n      accelerationY = 0,\n      lifetime = 1.0,\n      scale = 1.0,\n      alpha = 1.0,\n      tint = 0xFFFFFF\n    } = config;\n\n    this.sprite.position.set(x, y);\n    this.velocity.x = velocityX;\n    this.velocity.y = velocityY;\n    this.acceleration.x = accelerationX;\n    this.acceleration.y = accelerationY;\n    this.lifetime = lifetime;\n    this.age = 0;\n    this.initialScale = scale;\n    this.initialAlpha = alpha;\n    this.sprite.scale.set(scale);\n    this.sprite.alpha = alpha;\n    this.sprite.tint = tint;\n    this.sprite.visible = true;\n    this.isAlive = true;\n  }\n\n  /**\n   * 更新粒子状态\n   * @param {number} deltaTime - 帧间隔时间（秒）\n   * @returns {boolean} 是否死亡\n   */\n  update(deltaTime) {\n    if (!this.isAlive) return true;\n\n    // 更新年龄\n    this.age += deltaTime;\n\n    // 检查是否超过生命周期\n    if (this.age >= this.lifetime) {\n      this.isAlive = false;\n      this.sprite.visible = false;\n      return true;\n    }\n\n    // 更新速度（应用加速度）\n    this.velocity.x += this.acceleration.x * deltaTime;\n    this.velocity.y += this.acceleration.y * deltaTime;\n\n    // 更新位置\n    this.sprite.x += this.velocity.x * deltaTime;\n    this.sprite.y += this.velocity.y * deltaTime;\n\n    // 计算生命周期进度（0-1）\n    const progress = this.age / this.lifetime;\n\n    // 更新透明度（线性衰减）\n    this.sprite.alpha = this.initialAlpha * (1 - progress);\n\n    // 更新缩放（缓慢缩小到 20%）\n    this.sprite.scale.set(this.initialScale * (1 - progress * 0.8));\n\n    return false;\n  }\n\n  /**\n   * 重置粒子（用于对象池回收）\n   */\n  reset() {\n    this.sprite.visible = false;\n    this.velocity.x = 0;\n    this.velocity.y = 0;\n    this.acceleration.x = 0;\n    this.acceleration.y = 0;\n    this.age = 0;\n    this.isAlive = false;\n  }\n}\n\nexport default Particle;\n","/**\n * 粒子发射器 - 管理一组粒子的发射和更新\n */\n\nimport { Particle } from './Particle.js';\n\n/**\n * 粒子发射器类\n */\nexport class ParticleEmitter {\n  /**\n   * 创建粒子发射器\n   * @param {Object} config - 发射器配置\n   */\n  constructor(config) {\n    this.config = config;\n    this.particles = [];\n    this.isActive = true;\n    this.age = 0;\n  }\n\n  /**\n   * 发射粒子\n   * @param {number} count - 粒子数量\n   * @param {Function} particleFactory - 粒子工厂函数\n   */\n  emit(count, particleFactory) {\n    for (let i = 0; i < count; i++) {\n      const particle = particleFactory();\n      if (particle) {\n        this.particles.push(particle);\n      }\n    }\n  }\n\n  /**\n   * 更新所有粒子\n   * @param {number} deltaTime - 帧间隔时间（秒）\n   * @returns {boolean} 是否所有粒子都已死亡\n   */\n  update(deltaTime) {\n    if (!this.isActive) return true;\n\n    this.age += deltaTime;\n\n    // 更新所有粒子，移除死亡的粒子\n    for (let i = this.particles.length - 1; i >= 0; i--) {\n      const particle = this.particles[i];\n      const isDead = particle.update(deltaTime);\n\n      if (isDead) {\n        this.particles.splice(i, 1);\n      }\n    }\n\n    // 如果所有粒子都死亡，标记发射器为不活跃\n    if (this.particles.length === 0) {\n      this.isActive = false;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 销毁发射器\n   */\n  destroy() {\n    this.particles.forEach(particle => particle.reset());\n    this.particles = [];\n    this.isActive = false;\n  }\n\n  /**\n   * 获取活跃粒子数量\n   */\n  getActiveCount() {\n    return this.particles.length;\n  }\n}\n\nexport default ParticleEmitter;\n","/**\n * 性能监控器\n * 监控游戏性能指标（FPS、内存、帧时间等）\n */\n\nexport class PerformanceMonitor {\n  constructor(config = {}) {\n    this.config = config;\n    this.enabled = config.debug?.enabled || false;\n    this.showFPS = config.debug?.showFPS || false;\n    \n    // 性能指标\n    this.fps = 0;\n    this.frameTime = 0;\n    this.avgFrameTime = 0;\n    this.minFPS = Infinity;\n    this.maxFPS = 0;\n    \n    // 帧时间历史（用于计算平均值）\n    this.frameTimeHistory = [];\n    this.historySize = 60; // 保留60帧的历史\n    \n    // 内存监控\n    this.memoryUsage = 0;\n    this.peakMemoryUsage = 0;\n    \n    // 计时器\n    this.lastTime = performance.now();\n    this.startTime = this.lastTime;\n    \n    // 统计数据\n    this.totalFrames = 0;\n    this.droppedFrames = 0;\n    \n    // UI元素\n    this.statsElement = null;\n    \n    // 性能警告阈值\n    this.fpsWarningThreshold = 30;\n    this.memoryWarningThreshold = 100 * 1024 * 1024; // 100MB\n  }\n\n  /**\n   * 初始化性能监控器\n   */\n  init() {\n    if (!this.enabled) {\n      return;\n    }\n\n    // 创建性能显示UI\n    if (this.showFPS) {\n      this.createStatsUI();\n    }\n\n    console.log('📊 性能监控器已启动');\n  }\n\n  /**\n   * 创建性能统计UI\n   */\n  createStatsUI() {\n    this.statsElement = document.createElement('div');\n    this.statsElement.id = 'performance-stats';\n    this.statsElement.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(0, 0, 0, 0.8);\n      color: #0f0;\n      font-family: 'Courier New', monospace;\n      font-size: 12px;\n      padding: 10px;\n      border-radius: 5px;\n      z-index: 9999;\n      min-width: 150px;\n      pointer-events: none;\n    `;\n\n    document.body.appendChild(this.statsElement);\n  }\n\n  /**\n   * 更新性能指标\n   * @param {number} deltaTime - 帧间隔时间（毫秒）\n   */\n  update(deltaTime) {\n    if (!this.enabled) {\n      return;\n    }\n\n    const now = performance.now();\n    this.frameTime = now - this.lastTime;\n    this.lastTime = now;\n\n    // 计算FPS\n    this.fps = 1000 / this.frameTime;\n    this.totalFrames++;\n\n    // 更新FPS范围\n    if (this.fps < this.minFPS) this.minFPS = this.fps;\n    if (this.fps > this.maxFPS) this.maxFPS = this.fps;\n\n    // 检测掉帧\n    if (this.fps < this.fpsWarningThreshold) {\n      this.droppedFrames++;\n    }\n\n    // 更新帧时间历史\n    this.frameTimeHistory.push(this.frameTime);\n    if (this.frameTimeHistory.length > this.historySize) {\n      this.frameTimeHistory.shift();\n    }\n\n    // 计算平均帧时间\n    this.avgFrameTime = this.frameTimeHistory.reduce((a, b) => a + b, 0) / this.frameTimeHistory.length;\n\n    // 更新内存使用（如果浏览器支持）\n    if (performance.memory) {\n      this.memoryUsage = performance.memory.usedJSHeapSize;\n      if (this.memoryUsage > this.peakMemoryUsage) {\n        this.peakMemoryUsage = this.memoryUsage;\n      }\n\n      // 内存警告\n      if (this.memoryUsage > this.memoryWarningThreshold) {\n        console.warn(`⚠️  内存使用过高: ${this.formatBytes(this.memoryUsage)}`);\n      }\n    }\n\n    // 更新UI\n    if (this.showFPS && this.statsElement) {\n      this.updateStatsUI();\n    }\n  }\n\n  /**\n   * 更新性能统计UI\n   */\n  updateStatsUI() {\n    if (!this.statsElement) {\n      return;\n    }\n\n    const fpsColor = this.fps >= 55 ? '#0f0' : this.fps >= 30 ? '#ff0' : '#f00';\n    const memoryMB = this.memoryUsage / (1024 * 1024);\n    const peakMemoryMB = this.peakMemoryUsage / (1024 * 1024);\n\n    let html = `\n      <div style=\"color: ${fpsColor}; font-weight: bold;\">\n        FPS: ${this.fps.toFixed(1)}\n      </div>\n      <div style=\"color: #aaa; font-size: 10px;\">\n        Frame: ${this.frameTime.toFixed(2)}ms\n      </div>\n      <div style=\"color: #aaa; font-size: 10px;\">\n        Avg: ${this.avgFrameTime.toFixed(2)}ms\n      </div>\n    `;\n\n    if (performance.memory) {\n      html += `\n        <div style=\"color: #aaa; font-size: 10px; margin-top: 5px;\">\n          Memory: ${memoryMB.toFixed(1)}MB\n        </div>\n        <div style=\"color: #aaa; font-size: 10px;\">\n          Peak: ${peakMemoryMB.toFixed(1)}MB\n        </div>\n      `;\n    }\n\n    html += `\n      <div style=\"color: #aaa; font-size: 10px; margin-top: 5px;\">\n        Frames: ${this.totalFrames}\n      </div>\n      <div style=\"color: #aaa; font-size: 10px;\">\n        Dropped: ${this.droppedFrames}\n      </div>\n    `;\n\n    this.statsElement.innerHTML = html;\n  }\n\n  /**\n   * 获取性能指标\n   * @returns {Object} 性能指标对象\n   */\n  getMetrics() {\n    return {\n      fps: this.fps,\n      frameTime: this.frameTime,\n      avgFrameTime: this.avgFrameTime,\n      minFPS: this.minFPS,\n      maxFPS: this.maxFPS,\n      memoryUsage: this.memoryUsage,\n      peakMemoryUsage: this.peakMemoryUsage,\n      totalFrames: this.totalFrames,\n      droppedFrames: this.droppedFrames,\n      uptime: performance.now() - this.startTime\n    };\n  }\n\n  /**\n   * 打印性能报告\n   */\n  printReport() {\n    const metrics = this.getMetrics();\n    const uptimeSeconds = metrics.uptime / 1000;\n\n    console.log('\\n📊 性能报告');\n    console.log('═══════════════════════════════════');\n    console.log(`运行时间: ${uptimeSeconds.toFixed(2)}秒`);\n    console.log(`总帧数: ${metrics.totalFrames}`);\n    console.log(`平均FPS: ${(metrics.totalFrames / uptimeSeconds).toFixed(2)}`);\n    console.log(`最低FPS: ${metrics.minFPS.toFixed(2)}`);\n    console.log(`最高FPS: ${metrics.maxFPS.toFixed(2)}`);\n    console.log(`平均帧时间: ${metrics.avgFrameTime.toFixed(2)}ms`);\n    console.log(`掉帧数: ${metrics.droppedFrames} (${(metrics.droppedFrames / metrics.totalFrames * 100).toFixed(2)}%)`);\n    \n    if (performance.memory) {\n      console.log(`当前内存: ${this.formatBytes(metrics.memoryUsage)}`);\n      console.log(`峰值内存: ${this.formatBytes(metrics.peakMemoryUsage)}`);\n    }\n    \n    console.log('═══════════════════════════════════\\n');\n  }\n\n  /**\n   * 重置统计数据\n   */\n  reset() {\n    this.fps = 0;\n    this.frameTime = 0;\n    this.avgFrameTime = 0;\n    this.minFPS = Infinity;\n    this.maxFPS = 0;\n    this.frameTimeHistory = [];\n    this.totalFrames = 0;\n    this.droppedFrames = 0;\n    this.memoryUsage = 0;\n    this.peakMemoryUsage = 0;\n    this.lastTime = performance.now();\n    this.startTime = this.lastTime;\n  }\n\n  /**\n   * 格式化字节数\n   * @param {number} bytes - 字节数\n   * @returns {string} 格式化后的字符串\n   */\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n   * 销毁性能监控器\n   */\n  destroy() {\n    if (this.statsElement && this.statsElement.parentNode) {\n      this.statsElement.parentNode.removeChild(this.statsElement);\n      this.statsElement = null;\n    }\n  }\n}\n\n/**\n * 对象池 - 用于复用对象，减少GC压力\n */\nexport class ObjectPool {\n  constructor(factory, reset, initialSize = 10) {\n    this.factory = factory;      // 创建对象的工厂函数\n    this.reset = reset;           // 重置对象的函数\n    this.pool = [];               // 对象池\n    this.activeObjects = new Set(); // 活跃对象集合\n\n    // 预创建对象\n    for (let i = 0; i < initialSize; i++) {\n      this.pool.push(this.factory());\n    }\n  }\n\n  /**\n   * 获取对象\n   * @returns {Object} 对象实例\n   */\n  acquire() {\n    let obj;\n    \n    if (this.pool.length > 0) {\n      obj = this.pool.pop();\n    } else {\n      obj = this.factory();\n    }\n    \n    this.activeObjects.add(obj);\n    return obj;\n  }\n\n  /**\n   * 释放对象\n   * @param {Object} obj - 要释放的对象\n   */\n  release(obj) {\n    if (!this.activeObjects.has(obj)) {\n      console.warn('Trying to release an object that is not active');\n      return;\n    }\n\n    this.activeObjects.delete(obj);\n    this.reset(obj);\n    this.pool.push(obj);\n  }\n\n  /**\n   * 释放所有活跃对象\n   */\n  releaseAll() {\n    this.activeObjects.forEach(obj => {\n      this.reset(obj);\n      this.pool.push(obj);\n    });\n    this.activeObjects.clear();\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return {\n      poolSize: this.pool.length,\n      activeCount: this.activeObjects.size,\n      totalCount: this.pool.length + this.activeObjects.size\n    };\n  }\n\n  /**\n   * 清空对象池\n   */\n  clear() {\n    this.pool = [];\n    this.activeObjects.clear();\n  }\n}\n\nexport default PerformanceMonitor;\n","/**\n * 粒子效果管理器 - 管理所有粒子效果\n */\n\nimport * as PIXI from 'pixi.js';\nimport { Particle } from './Particle.js';\nimport { ParticleEmitter } from './ParticleEmitter.js';\nimport { ObjectPool } from '../utils/PerformanceMonitor.js';\n\n/**\n * 粒子效果管理器类\n */\nexport class ParticleEffects {\n  /**\n   * 创建粒子效果管理器\n   * @param {PIXI.Application} app - PixiJS 应用\n   * @param {Object} config - 游戏配置\n   */\n  constructor(app, config) {\n    this.app = app;\n    this.config = config;\n\n    // 创建粒子容器（使用普通 Container，因为 ParticleContainer 在 v8 中有限制）\n    this.particleContainer = new PIXI.Container();\n    this.particleContainer.label = 'particleContainer';\n\n    // 发射器列表\n    this.emitters = [];\n\n    // 粒子对象池\n    this.particlePool = new ObjectPool(\n      () => this._createParticleSprite(),\n      (particle) => particle.reset(),\n      50 // 初始池大小\n    );\n\n    // 统计信息\n    this.stats = {\n      totalParticles: 0,\n      activeParticles: 0,\n      emittersCount: 0\n    };\n  }\n\n  /**\n   * 创建粒子精灵（内部方法）\n   * @private\n   */\n  _createParticleSprite() {\n    // 创建简单的圆形粒子纹理\n    const graphics = new PIXI.Graphics();\n    graphics.beginFill(0xFFFFFF);\n    graphics.drawCircle(0, 0, 4);\n    graphics.endFill();\n\n    const texture = this.app.renderer.generateTexture(graphics);\n    const sprite = new PIXI.Sprite(texture);\n    sprite.anchor.set(0.5);\n\n    // 添加到粒子容器\n    this.particleContainer.addChild(sprite);\n\n    // 创建粒子对象\n    return new Particle(sprite);\n  }\n\n  /**\n   * 从对象池获取粒子\n   * @private\n   */\n  _acquireParticle() {\n    return this.particlePool.acquire();\n  }\n\n  /**\n   * 释放粒子到对象池\n   * @private\n   */\n  _releaseParticle(particle) {\n    this.particlePool.release(particle);\n  }\n\n  /**\n   * 创建消除爆炸效果\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   * @param {string|number} color - 颜色（十六进制字符串或数字）\n   * @param {number} count - 粒子数量\n   */\n  createExplosion(x, y, color, count = 25) {\n    if (!this.config.particles?.enabled) return;\n\n    const explosionConfig = this.config.particles.explosion;\n    const emitter = new ParticleEmitter({ type: 'explosion' });\n\n    // 转换颜色\n    const tint = typeof color === 'string' \n      ? parseInt(color.replace('#', ''), 16) \n      : color;\n\n    // 发射粒子\n    emitter.emit(count, () => {\n      const particle = this._acquireParticle();\n\n      // 随机方向和速度\n      const angle = Math.random() * Math.PI * 2;\n      const speed = explosionConfig.speed.min + \n                   Math.random() * (explosionConfig.speed.max - explosionConfig.speed.min);\n\n      const velocityX = Math.cos(angle) * speed;\n      const velocityY = Math.sin(angle) * speed;\n\n      // 随机大小\n      const size = explosionConfig.size.min + \n                  Math.random() * (explosionConfig.size.max - explosionConfig.size.min);\n      const scale = size / 8; // 基础大小是 8px\n\n      particle.init({\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX: 0,\n        accelerationY: explosionConfig.gravity,\n        lifetime: explosionConfig.lifetime,\n        scale,\n        alpha: 1.0,\n        tint\n      });\n\n      this.stats.totalParticles++;\n      return particle;\n    });\n\n    this.emitters.push(emitter);\n    this.stats.emittersCount++;\n  }\n\n  /**\n   * 创建连锁特效\n   * @param {number} comboCount - 连锁数\n   */\n  createComboBurst(comboCount) {\n    if (!this.config.particles?.enabled) return;\n\n    const comboConfig = this.config.particles.combo;\n    const emitter = new ParticleEmitter({ type: 'combo' });\n\n    // 根据连锁数计算粒子数量\n    const count = Math.min(\n      comboConfig.baseCount + (comboCount - 1) * comboConfig.countPerCombo,\n      100 // 最多 100 个粒子\n    );\n\n    // 屏幕中央位置\n    const centerX = this.app.screen.width / 2;\n    const centerY = this.app.screen.height / 2;\n\n    // 彩虹色数组\n    const rainbowColors = [\n      0xFF0000, // 红\n      0xFF7F00, // 橙\n      0xFFFF00, // 黄\n      0x00FF00, // 绿\n      0x0000FF, // 蓝\n      0x4B0082, // 靛\n      0x9400D3  // 紫\n    ];\n\n    // 发射粒子\n    emitter.emit(count, () => {\n      const particle = this._acquireParticle();\n\n      // 螺旋扩散\n      const index = emitter.particles.length;\n      const angle = (index / count) * Math.PI * 2 * 3; // 3圈螺旋\n      const speed = comboConfig.speed.min + \n                   Math.random() * (comboConfig.speed.max - comboConfig.speed.min);\n\n      const velocityX = Math.cos(angle) * speed;\n      const velocityY = Math.sin(angle) * speed;\n\n      // 彩虹色\n      const colorIndex = Math.floor((index / count) * rainbowColors.length);\n      const tint = rainbowColors[colorIndex];\n\n      particle.init({\n        x: centerX,\n        y: centerY,\n        velocityX,\n        velocityY,\n        accelerationX: 0,\n        accelerationY: 0,\n        lifetime: comboConfig.lifetime,\n        scale: 1.0 + comboCount * 0.1, // 连锁越高，粒子越大\n        alpha: 1.0,\n        tint\n      });\n\n      this.stats.totalParticles++;\n      return particle;\n    });\n\n    this.emitters.push(emitter);\n    this.stats.emittersCount++;\n  }\n\n  /**\n   * 创建特殊图标激活效果\n   * @param {string} type - 特殊图标类型\n   * @param {number} x - X坐标\n   * @param {number} y - Y坐标\n   */\n  createSpecialActivation(type, x, y) {\n    if (!this.config.particles?.enabled) return;\n\n    const specialConfig = this.config.particles.special;\n\n    switch (type) {\n      case 'bomb':\n        this._createBombEffect(x, y, specialConfig.bomb);\n        break;\n      case 'color-bomb':\n        this._createColorBombEffect(specialConfig.colorBomb);\n        break;\n      case 'row-clear':\n        this._createLineClearEffect(x, y, 'horizontal', specialConfig.lineClear);\n        break;\n      case 'col-clear':\n        this._createLineClearEffect(x, y, 'vertical', specialConfig.lineClear);\n        break;\n    }\n  }\n\n  /**\n   * 创建炸弹效果（3x3 冲击波）\n   * @private\n   */\n  _createBombEffect(x, y, config) {\n    const emitter = new ParticleEmitter({ type: 'bomb' });\n\n    // 橙红色火焰\n    const fireColors = [0xFF4500, 0xFF6347, 0xFF8C00, 0xFFA500];\n\n    emitter.emit(config.count, () => {\n      const particle = this._acquireParticle();\n\n      // 随机方向和速度\n      const angle = Math.random() * Math.PI * 2;\n      const speed = config.speed.min + \n                   Math.random() * (config.speed.max - config.speed.min);\n\n      const velocityX = Math.cos(angle) * speed;\n      const velocityY = Math.sin(angle) * speed;\n\n      // 随机火焰色\n      const tint = fireColors[Math.floor(Math.random() * fireColors.length)];\n\n      particle.init({\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX: 0,\n        accelerationY: 100, // 轻微向下\n        lifetime: config.lifetime,\n        scale: 1.2,\n        alpha: 1.0,\n        tint\n      });\n\n      this.stats.totalParticles++;\n      return particle;\n    });\n\n    this.emitters.push(emitter);\n    this.stats.emittersCount++;\n  }\n\n  /**\n   * 创建彩色炸弹效果（全屏粒子雨）\n   * @private\n   */\n  _createColorBombEffect(config) {\n    const emitter = new ParticleEmitter({ type: 'colorBomb' });\n\n    // 彩虹色\n    const rainbowColors = [\n      0xFF0000, 0xFF7F00, 0xFFFF00, 0x00FF00, \n      0x0000FF, 0x4B0082, 0x9400D3\n    ];\n\n    emitter.emit(config.count, () => {\n      const particle = this._acquireParticle();\n\n      // 从顶部随机位置落下\n      const startX = Math.random() * this.app.screen.width;\n      const startY = -20;\n\n      const speed = config.speed.min + \n                   Math.random() * (config.speed.max - config.speed.min);\n\n      // 随机彩虹色\n      const tint = rainbowColors[Math.floor(Math.random() * rainbowColors.length)];\n\n      particle.init({\n        x: startX,\n        y: startY,\n        velocityX: (Math.random() - 0.5) * 50, // 轻微横向摆动\n        velocityY: speed,\n        accelerationX: 0,\n        accelerationY: 50, // 加速下落\n        lifetime: config.lifetime,\n        scale: 1.5,\n        alpha: 1.0,\n        tint\n      });\n\n      this.stats.totalParticles++;\n      return particle;\n    });\n\n    this.emitters.push(emitter);\n    this.stats.emittersCount++;\n  }\n\n  /**\n   * 创建横向/纵向消除效果（光束粒子）\n   * @private\n   */\n  _createLineClearEffect(x, y, direction, config) {\n    const emitter = new ParticleEmitter({ type: 'lineClear' });\n\n    // 蓝白色光束\n    const beamColors = [0x00BFFF, 0x87CEEB, 0xFFFFFF, 0xADD8E6];\n\n    emitter.emit(config.count, () => {\n      const particle = this._acquireParticle();\n\n      const speed = config.speed.min + \n                   Math.random() * (config.speed.max - config.speed.min);\n\n      let velocityX, velocityY;\n      if (direction === 'horizontal') {\n        // 横向扩散\n        velocityX = (Math.random() > 0.5 ? 1 : -1) * speed;\n        velocityY = (Math.random() - 0.5) * 50;\n      } else {\n        // 纵向扩散\n        velocityX = (Math.random() - 0.5) * 50;\n        velocityY = (Math.random() > 0.5 ? 1 : -1) * speed;\n      }\n\n      const tint = beamColors[Math.floor(Math.random() * beamColors.length)];\n\n      particle.init({\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX: 0,\n        accelerationY: 0,\n        lifetime: config.lifetime,\n        scale: 1.0,\n        alpha: 1.0,\n        tint\n      });\n\n      this.stats.totalParticles++;\n      return particle;\n    });\n\n    this.emitters.push(emitter);\n    this.stats.emittersCount++;\n  }\n\n  /**\n   * 更新所有粒子效果\n   * @param {number} deltaTime - 帧间隔时间（毫秒）\n   */\n  update(deltaTime) {\n    const deltaSeconds = deltaTime / 1000;\n\n    // 更新所有发射器，移除不活跃的\n    for (let i = this.emitters.length - 1; i >= 0; i--) {\n      const emitter = this.emitters[i];\n      const isDead = emitter.update(deltaSeconds);\n\n      if (isDead) {\n        // 回收粒子到对象池\n        emitter.particles.forEach(particle => {\n          this._releaseParticle(particle);\n        });\n        emitter.destroy();\n        this.emitters.splice(i, 1);\n        this.stats.emittersCount--;\n      }\n    }\n\n    // 更新统计信息\n    this.stats.activeParticles = this.emitters.reduce(\n      (sum, emitter) => sum + emitter.getActiveCount(),\n      0\n    );\n  }\n\n  /**\n   * 清除所有粒子效果\n   */\n  clear() {\n    this.emitters.forEach(emitter => {\n      emitter.particles.forEach(particle => {\n        this._releaseParticle(particle);\n      });\n      emitter.destroy();\n    });\n    this.emitters = [];\n    this.stats.emittersCount = 0;\n    this.stats.activeParticles = 0;\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return { ...this.stats };\n  }\n\n  /**\n   * 销毁粒子效果管理器\n   */\n  destroy() {\n    this.clear();\n    this.particleContainer.destroy({ children: true });\n  }\n}\n\nexport default ParticleEffects;\n","/**\n * 渲染引擎 - 基于 PixiJS\n * 负责管理场景图、精灵渲染和视觉效果\n */\n\nimport * as PIXI from 'pixi.js';\nimport { GameConfig } from '../config.js';\nimport { ParticleEffects } from './ParticleEffects.js';\n\nexport class RenderEngine {\n  constructor(containerElement, config, eventBus) {\n    this.container = containerElement;\n    this.config = config || GameConfig;\n    this.eventBus = eventBus;\n    \n    // PixiJS 应用实例\n    this.app = null;\n    \n    // 场景图层\n    this.layers = {\n      background: null,\n      board: null,\n      effects: null,\n      ui: null\n    };\n    \n    // 精灵映射表（tile.id -> sprite）\n    this.tileSprites = new Map();\n    \n    // 选中效果图形\n    this.selectionGraphics = null;\n    \n    // 粒子效果管理器\n    this.particleEffects = null;\n    \n    // 初始化状态\n    this.isInitialized = false;\n  }\n\n  /**\n   * 初始化 PixiJS 应用\n   */\n  async init() {\n    try {\n      // 创建 PixiJS 应用\n      this.app = new PIXI.Application();\n      \n      await this.app.init({\n        width: this.config.rendering.canvasWidth,\n        height: this.config.rendering.canvasHeight,\n        backgroundColor: this.config.rendering.backgroundColor,\n        antialias: true,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true\n      });\n\n      // 将 canvas 挂载到容器\n      this.container.appendChild(this.app.canvas);\n\n      // 创建场景图层\n      this.createLayers();\n\n      // 创建背景\n      this.createBackground();\n\n      // 创建粒子效果管理器\n      this.particleEffects = new ParticleEffects(this.app, this.config);\n      // 将粒子容器添加到特效层之上\n      this.app.stage.addChild(this.particleEffects.particleContainer);\n\n      // 在 ticker 中更新粒子\n      this.app.ticker.add((ticker) => {\n        if (this.particleEffects) {\n          this.particleEffects.update(ticker.deltaMS);\n        }\n      });\n\n      // 监听窗口大小变化\n      window.addEventListener('resize', () => this.resize());\n\n      this.isInitialized = true;\n      console.log('✅ RenderEngine 初始化完成');\n\n      return true;\n    } catch (error) {\n      console.error('❌ RenderEngine 初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 创建场景图层\n   */\n  createLayers() {\n    // 背景层\n    this.layers.background = new PIXI.Container();\n    this.layers.background.label = 'backgroundLayer';\n    this.app.stage.addChild(this.layers.background);\n\n    // 游戏板层\n    this.layers.board = new PIXI.Container();\n    this.layers.board.label = 'boardLayer';\n    this.app.stage.addChild(this.layers.board);\n\n    // 特效层\n    this.layers.effects = new PIXI.Container();\n    this.layers.effects.label = 'effectLayer';\n    this.app.stage.addChild(this.layers.effects);\n\n    // UI 层\n    this.layers.ui = new PIXI.Container();\n    this.layers.ui.label = 'uiLayer';\n    this.app.stage.addChild(this.layers.ui);\n\n    console.log('✅ 场景图层创建完成');\n  }\n\n  /**\n   * 创建背景网格\n   */\n  createBackground() {\n    const graphics = new PIXI.Graphics();\n    const { rows, cols } = this.config.board;\n    const { tileSize, padding, boardOffsetX, boardOffsetY, gridColor } = this.config.rendering;\n\n    // 绘制网格背景\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        const screenX = x * tileSize + boardOffsetX;\n        const screenY = y * tileSize + boardOffsetY;\n\n        // 绘制网格单元格\n        graphics.rect(screenX, screenY, tileSize, tileSize);\n        graphics.fill({ color: gridColor, alpha: 0.3 });\n        graphics.stroke({ color: gridColor, width: 1, alpha: 0.5 });\n      }\n    }\n\n    this.layers.background.addChild(graphics);\n    console.log('✅ 背景网格创建完成');\n  }\n\n  /**\n   * 网格坐标转屏幕坐标\n   */\n  gridToScreen(gridX, gridY) {\n    const { tileSize, boardOffsetX, boardOffsetY } = this.config.rendering;\n    return {\n      x: gridX * tileSize + boardOffsetX + tileSize / 2,\n      y: gridY * tileSize + boardOffsetY + tileSize / 2\n    };\n  }\n\n  /**\n   * 屏幕坐标转网格坐标\n   */\n  screenToGrid(screenX, screenY) {\n    const { tileSize, boardOffsetX, boardOffsetY } = this.config.rendering;\n    return {\n      x: Math.floor((screenX - boardOffsetX) / tileSize),\n      y: Math.floor((screenY - boardOffsetY) / tileSize)\n    };\n  }\n\n  /**\n   * 调整画布大小\n   */\n  resize() {\n    if (!this.app) return;\n\n    const parent = this.container;\n    const { canvasWidth, canvasHeight } = this.config.rendering;\n\n    // 计算缩放比例\n    const scaleX = parent.clientWidth / canvasWidth;\n    const scaleY = parent.clientHeight / canvasHeight;\n    const scale = Math.min(scaleX, scaleY);\n\n    // 调整 canvas 大小\n    this.app.renderer.resize(canvasWidth * scale, canvasHeight * scale);\n    this.app.stage.scale.set(scale);\n\n    console.log(`🔄 画布大小调整: ${canvasWidth * scale}x${canvasHeight * scale}`);\n  }\n\n  /**\n   * 高亮选中的图标\n   */\n  highlightTile(tile) {\n    if (!this.selectionGraphics) {\n      this.selectionGraphics = new PIXI.Graphics();\n      this.layers.effects.addChild(this.selectionGraphics);\n    }\n\n    const { x, y } = this.gridToScreen(tile.x, tile.y);\n    const { tileSize, selectionColor, selectionWidth } = this.config.rendering;\n\n    this.selectionGraphics.clear();\n    this.selectionGraphics.rect(\n      x - tileSize / 2,\n      y - tileSize / 2,\n      tileSize,\n      tileSize\n    );\n    this.selectionGraphics.stroke({ \n      color: selectionColor, \n      width: selectionWidth \n    });\n  }\n\n  /**\n   * 取消高亮\n   */\n  unhighlightTile() {\n    if (this.selectionGraphics) {\n      this.selectionGraphics.clear();\n    }\n  }\n\n  /**\n   * 创建图标精灵\n   * @param {Tile} tile - 图标数据\n   * @param {TileTextureFactory} textureFactory - 纹理工厂\n   */\n  createTileSprite(tile, textureFactory) {\n    // 获取纹理\n    const textureKey = tile.isSpecial ? tile.specialType : `type${tile.type}`;\n    const texture = textureFactory.getTexture(textureKey);\n\n    if (!texture) {\n      throw new Error(`Texture not found for key: ${textureKey}`);\n    }\n\n    // 创建精灵\n    const sprite = new PIXI.Sprite(texture);\n\n    // 设置锚点为中心（便于旋转和缩放）\n    sprite.anchor.set(0.5);\n\n    // ✅ 关键修复：计算正确的缩放比例\n    // 不要使用 width/height，因为那会自动修改 scale\n    // 而是直接设置 scale 来控制大小\n    const targetSize = this.config.rendering.tileSize;\n    const textureSize = Math.max(texture.width, texture.height);\n    const correctScale = targetSize / textureSize;\n    \n    // 设置正确的缩放（这是精灵的\"正常\"大小）\n    sprite.scale.set(correctScale);\n\n    // 设置初始透明度\n    sprite.alpha = 1.0;\n\n    // 计算屏幕位置\n    const { x: screenX, y: screenY } = this.gridToScreen(tile.x, tile.y);\n    sprite.position.set(screenX, screenY);\n\n    // 设置交互属性\n    sprite.eventMode = 'static'; // PixiJS v8 新 API\n    sprite.cursor = 'pointer';\n\n    // 存储图块数据引用（便于事件处理）\n    sprite.tileData = tile;\n    \n    // ✅ 存储正常缩放值（用于动画恢复）\n    sprite.normalScale = correctScale;\n\n    // 添加到游戏板层\n    this.layers.board.addChild(sprite);\n\n    // 缓存精灵\n    this.tileSprites.set(tile.id, sprite);\n\n    return sprite;\n  }\n\n  /**\n   * 更新图标精灵\n   * @param {PIXI.Sprite} sprite - 精灵对象\n   * @param {Tile} tile - 图标数据\n   * @param {TileTextureFactory} textureFactory - 纹理工厂（可选，用于更新纹理）\n   */\n  updateTileSprite(sprite, tile, textureFactory = null) {\n    const { x: screenX, y: screenY } = this.gridToScreen(tile.x, tile.y);\n    sprite.position.set(screenX, screenY);\n    sprite.tileData = tile;\n    \n    // ✅ 如果提供了纹理工厂，检查是否需要更新纹理（例如变成特殊图标）\n    if (textureFactory) {\n      const textureKey = tile.isSpecial ? tile.specialType : `type${tile.type}`;\n      const newTexture = textureFactory.getTexture(textureKey);\n      \n      if (newTexture && sprite.texture !== newTexture) {\n        sprite.texture = newTexture;\n        console.log(`🔄 更新精灵纹理: ${textureKey}`);\n      }\n    }\n  }\n\n  /**\n   * 移除图标精灵\n   * @param {string} tileId - 图标ID\n   */\n  removeTileSprite(tileId) {\n    const sprite = this.tileSprites.get(tileId);\n    if (sprite) {\n      this.layers.board.removeChild(sprite);\n      sprite.destroy();\n      this.tileSprites.delete(tileId);\n    }\n  }\n\n  /**\n   * 渲染游戏板\n   * @param {Board} board - 游戏板数据\n   * @param {TileTextureFactory} textureFactory - 纹理工厂\n   */\n  renderBoard(board, textureFactory) {\n    // 清除现有精灵\n    this.tileSprites.forEach((sprite, id) => {\n      this.layers.board.removeChild(sprite);\n      sprite.destroy();\n    });\n    this.tileSprites.clear();\n\n    // 创建所有图标精灵\n    for (let y = 0; y < board.rows; y++) {\n      for (let x = 0; x < board.cols; x++) {\n        const tile = board.getTile(x, y);\n        if (tile) {\n          this.createTileSprite(tile, textureFactory);\n        }\n      }\n    }\n\n    console.log(`✅ 游戏板渲染完成: ${this.tileSprites.size} 个精灵`);\n  }\n\n  /**\n   * 获取图标精灵\n   */\n  getTileSprite(tileId) {\n    return this.tileSprites.get(tileId);\n  }\n\n  /**\n   * 创建 UI 元素\n   */\n  createUI() {\n    // 创建分数文本\n    this.scoreText = new PIXI.Text({\n      text: '分数: 0',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 28,\n        fontWeight: 'bold',\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 3 }\n      }\n    });\n    this.scoreText.position.set(20, 20);\n    this.layers.ui.addChild(this.scoreText);\n\n    // 创建 FPS 显示（如果启用调试模式）\n    if (this.config.debug.showFPS) {\n      this.fpsText = new PIXI.Text({\n        text: 'FPS: 60',\n        style: {\n          fontFamily: 'Arial, sans-serif',\n          fontSize: 16,\n          fill: 0x00FF00,\n          stroke: { color: 0x000000, width: 2 }\n        }\n      });\n      this.fpsText.anchor.set(1, 0);\n      this.fpsText.position.set(this.config.rendering.canvasWidth - 20, this.config.rendering.canvasHeight - 30);\n      this.layers.ui.addChild(this.fpsText);\n    }\n\n    // 创建计时器文本\n    this.timerText = new PIXI.Text({\n      text: '时间: 60',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 28,\n        fontWeight: 'bold',\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 3 }\n      }\n    });\n    this.timerText.anchor.set(1, 0);\n    this.timerText.position.set(this.config.rendering.canvasWidth - 20, 20);\n    this.layers.ui.addChild(this.timerText);\n\n    // 创建移动次数文本\n    this.movesText = new PIXI.Text({\n      text: '移动: 0',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 24,\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 2 }\n      }\n    });\n    this.movesText.position.set(20, 60);\n    this.layers.ui.addChild(this.movesText);\n\n    // 创建暂停按钮\n    this.pauseButton = this.createButton('暂停', this.config.rendering.canvasWidth / 2 - 50, 20, 100, 40);\n    this.pauseButton.on('pointerdown', () => {\n      this.eventBus.emit('game:pause');\n      this.showPauseMenu();\n    });\n    this.layers.ui.addChild(this.pauseButton);\n\n    console.log('✅ UI 元素创建完成');\n  }\n\n  /**\n   * 创建按钮\n   * @param {string} text - 按钮文字\n   * @param {number} x - X 坐标\n   * @param {number} y - Y 坐标\n   * @param {number} width - 宽度\n   * @param {number} height - 高度\n   * @returns {PIXI.Container} 按钮容器\n   */\n  createButton(text, x, y, width, height) {\n    const button = new PIXI.Container();\n    button.position.set(x, y);\n    button.eventMode = 'static';\n    button.cursor = 'pointer';\n\n    // 按钮背景\n    const bg = new PIXI.Graphics();\n    bg.roundRect(0, 0, width, height, 8);\n    bg.fill({ color: 0x3498db, alpha: 0.9 });\n    bg.stroke({ color: 0x2980b9, width: 2 });\n    button.addChild(bg);\n\n    // 按钮文字\n    const buttonText = new PIXI.Text({\n      text: text,\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 18,\n        fontWeight: 'bold',\n        fill: 0xFFFFFF\n      }\n    });\n    buttonText.anchor.set(0.5);\n    buttonText.position.set(width / 2, height / 2);\n    button.addChild(buttonText);\n\n    // 悬停效果\n    button.on('pointerover', () => {\n      bg.clear();\n      bg.roundRect(0, 0, width, height, 8);\n      bg.fill({ color: 0x5dade2, alpha: 1 });\n      bg.stroke({ color: 0x2980b9, width: 2 });\n    });\n\n    button.on('pointerout', () => {\n      bg.clear();\n      bg.roundRect(0, 0, width, height, 8);\n      bg.fill({ color: 0x3498db, alpha: 0.9 });\n      bg.stroke({ color: 0x2980b9, width: 2 });\n    });\n\n    // 点击效果\n    button.on('pointerdown', () => {\n      button.scale.set(0.95);\n    });\n\n    button.on('pointerup', () => {\n      button.scale.set(1.0);\n    });\n\n    return button;\n  }\n\n  /**\n   * 更新分数显示\n   * @param {number} score - 当前分数\n   */\n  updateScore(score) {\n    if (this.scoreText) {\n      this.scoreText.text = `分数: ${score}`;\n    }\n  }\n\n  /**\n   * 更新计时器显示\n   * @param {number} time - 剩余时间（秒）\n   */\n  updateTimer(time) {\n    if (this.timerText) {\n      const minutes = Math.floor(time / 60);\n      const seconds = Math.floor(time % 60);\n      this.timerText.text = `时间: ${minutes}:${seconds.toString().padStart(2, '0')}`;\n      \n      // 时间少于10秒时显示红色警告\n      if (time <= this.config.timer.warningTime) {\n        this.timerText.style.fill = 0xFF0000;\n      } else {\n        this.timerText.style.fill = 0xFFFFFF;\n      }\n    }\n  }\n\n  /**\n   * 更新移动次数显示\n   * @param {number} moves - 移动次数\n   */\n  updateMoves(moves) {\n    if (this.movesText) {\n      this.movesText.text = `移动: ${moves}`;\n    }\n  }\n\n  /**\n   * 更新 FPS 显示\n   * @param {number} fps - 当前 FPS\n   */\n  updateFPS(fps) {\n    if (this.fpsText) {\n      this.fpsText.text = `FPS: ${Math.round(fps)}`;\n    }\n  }\n\n  /**\n   * 显示分数增加动画\n   * @param {number} delta - 增加的分数\n   * @param {number} x - X 坐标\n   * @param {number} y - Y 坐标\n   */\n  showScoreDelta(delta, x, y) {\n    const deltaText = new PIXI.Text({\n      text: `+${delta}`,\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 24,\n        fontWeight: 'bold',\n        fill: 0xFFD700,\n        stroke: { color: 0x000000, width: 3 }\n      }\n    });\n    deltaText.anchor.set(0.5);\n    deltaText.position.set(x, y);\n    this.layers.effects.addChild(deltaText);\n\n    // 简单的上浮淡出动画\n    let elapsed = 0;\n    const duration = 1000;\n    const startY = y;\n\n    const animate = (delta) => {\n      elapsed += delta;\n      const progress = elapsed / duration;\n\n      if (progress >= 1) {\n        this.layers.effects.removeChild(deltaText);\n        deltaText.destroy();\n        return;\n      }\n\n      deltaText.position.y = startY - progress * 50;\n      deltaText.alpha = 1 - progress;\n    };\n\n    this.app.ticker.add(animate);\n  }\n\n  /**\n   * 创建开始菜单\n   */\n  createStartMenu() {\n    const menu = new PIXI.Container();\n    menu.label = 'startMenu';\n\n    // 半透明背景\n    const overlay = new PIXI.Graphics();\n    overlay.rect(0, 0, this.config.rendering.canvasWidth, this.config.rendering.canvasHeight);\n    overlay.fill({ color: 0x000000, alpha: 0.7 });\n    menu.addChild(overlay);\n\n    // 标题\n    const title = new PIXI.Text({\n      text: '小鬼消消乐',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 48,\n        fontWeight: 'bold',\n        fill: 0xFFD700,\n        stroke: { color: 0x000000, width: 5 }\n      }\n    });\n    title.anchor.set(0.5);\n    title.position.set(this.config.rendering.canvasWidth / 2, 200);\n    menu.addChild(title);\n\n    // 开始按钮\n    const startButton = this.createButton(\n      '开始游戏',\n      this.config.rendering.canvasWidth / 2 - 75,\n      350,\n      150,\n      50\n    );\n    startButton.on('pointerdown', () => {\n      this.eventBus.emit('game:start');\n    });\n    menu.addChild(startButton);\n\n    this.startMenu = menu;\n    this.layers.ui.addChild(menu);\n  }\n\n  /**\n   * 隐藏开始菜单\n   */\n  hideStartMenu() {\n    if (this.startMenu) {\n      this.layers.ui.removeChild(this.startMenu);\n      this.startMenu.destroy({ children: true });\n      this.startMenu = null;\n    }\n  }\n\n  /**\n   * 创建暂停菜单\n   */\n  createPauseMenu() {\n    const menu = new PIXI.Container();\n    menu.label = 'pauseMenu';\n\n    // 半透明背景\n    const overlay = new PIXI.Graphics();\n    overlay.rect(0, 0, this.config.rendering.canvasWidth, this.config.rendering.canvasHeight);\n    overlay.fill({ color: 0x000000, alpha: 0.7 });\n    menu.addChild(overlay);\n\n    // 暂停文字\n    const pauseText = new PIXI.Text({\n      text: '游戏暂停',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 48,\n        fontWeight: 'bold',\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 5 }\n      }\n    });\n    pauseText.anchor.set(0.5);\n    pauseText.position.set(this.config.rendering.canvasWidth / 2, 200);\n    menu.addChild(pauseText);\n\n    // 继续按钮\n    const resumeButton = this.createButton(\n      '继续游戏',\n      this.config.rendering.canvasWidth / 2 - 75,\n      300,\n      150,\n      50\n    );\n    resumeButton.on('pointerdown', () => {\n      this.hidePauseMenu();\n      this.eventBus.emit('game:resume');\n    });\n    menu.addChild(resumeButton);\n\n    // 重新开始按钮\n    const restartButton = this.createButton(\n      '重新开始',\n      this.config.rendering.canvasWidth / 2 - 75,\n      370,\n      150,\n      50\n    );\n    restartButton.on('pointerdown', () => {\n      this.hidePauseMenu();\n      this.eventBus.emit('game:restart');\n    });\n    menu.addChild(restartButton);\n\n    this.pauseMenu = menu;\n    this.layers.ui.addChild(menu);\n  }\n\n  /**\n   * 显示暂停菜单\n   */\n  showPauseMenu() {\n    if (!this.pauseMenu) {\n      this.createPauseMenu();\n    }\n  }\n\n  /**\n   * 隐藏暂停菜单\n   */\n  hidePauseMenu() {\n    if (this.pauseMenu) {\n      this.layers.ui.removeChild(this.pauseMenu);\n      this.pauseMenu.destroy({ children: true });\n      this.pauseMenu = null;\n    }\n  }\n\n  /**\n   * 创建游戏结束界面\n   * @param {Object} data - 游戏结束数据\n   */\n  createGameOverUI(data) {\n    const menu = new PIXI.Container();\n    menu.label = 'gameOverMenu';\n\n    // 半透明背景\n    const overlay = new PIXI.Graphics();\n    overlay.rect(0, 0, this.config.rendering.canvasWidth, this.config.rendering.canvasHeight);\n    overlay.fill({ color: 0x000000, alpha: 0.8 });\n    menu.addChild(overlay);\n\n    // 游戏结束文字\n    const gameOverText = new PIXI.Text({\n      text: '游戏结束',\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 48,\n        fontWeight: 'bold',\n        fill: 0xFF6B6B,\n        stroke: { color: 0x000000, width: 5 }\n      }\n    });\n    gameOverText.anchor.set(0.5);\n    gameOverText.position.set(this.config.rendering.canvasWidth / 2, 150);\n    menu.addChild(gameOverText);\n\n    // 最终分数\n    const scoreText = new PIXI.Text({\n      text: `最终分数: ${data.finalScore}`,\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 32,\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 3 }\n      }\n    });\n    scoreText.anchor.set(0.5);\n    scoreText.position.set(this.config.rendering.canvasWidth / 2, 250);\n    menu.addChild(scoreText);\n\n    // 移动次数\n    const movesText = new PIXI.Text({\n      text: `移动次数: ${data.moves}`,\n      style: {\n        fontFamily: 'Arial, sans-serif',\n        fontSize: 24,\n        fill: 0xFFFFFF,\n        stroke: { color: 0x000000, width: 2 }\n      }\n    });\n    movesText.anchor.set(0.5);\n    movesText.position.set(this.config.rendering.canvasWidth / 2, 300);\n    menu.addChild(movesText);\n\n    // 重新开始按钮\n    const restartButton = this.createButton(\n      '重新开始',\n      this.config.rendering.canvasWidth / 2 - 75,\n      370,\n      150,\n      50\n    );\n    restartButton.on('pointerdown', () => {\n      this.hideGameOverUI();\n      this.eventBus.emit('game:restart');\n    });\n    menu.addChild(restartButton);\n\n    this.gameOverMenu = menu;\n    this.layers.ui.addChild(menu);\n  }\n\n  /**\n   * 隐藏游戏结束界面\n   */\n  hideGameOverUI() {\n    if (this.gameOverMenu) {\n      this.layers.ui.removeChild(this.gameOverMenu);\n      this.gameOverMenu.destroy({ children: true });\n      this.gameOverMenu = null;\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    if (this.app) {\n      this.app.destroy(true, { children: true, texture: true });\n      this.app = null;\n    }\n    this.tileSprites.clear();\n    this.isInitialized = false;\n    console.log('🗑️  RenderEngine 已清理');\n  }\n}\n\nexport default RenderEngine;\n","/**\n * 图标纹理工厂\n * 负责加载和管理所有图标纹理资源\n */\n\nimport * as PIXI from 'pixi.js';\nimport { GameConfig } from '../config.js';\n\nexport class TileTextureFactory {\n  constructor(config) {\n    this.config = config || GameConfig;\n    this.textures = new Map();\n    this.isLoaded = false;\n    this.loadProgress = 0;\n  }\n\n  /**\n   * 初始化并加载所有纹理\n   * @param {Function} onProgress - 加载进度回调 (progress: 0-100)\n   */\n  async init(onProgress) {\n    console.log('🎨 开始加载纹理资源...');\n\n    // 定义资源清单\n    const assets = [\n      // 普通图标\n      { alias: 'type0', src: '/assets/images/ghosts/ghost-red.png' },\n      { alias: 'type1', src: '/assets/images/ghosts/ghost-blue.png' },\n      { alias: 'type2', src: '/assets/images/ghosts/ghost-yellow.png' },\n      { alias: 'type3', src: '/assets/images/ghosts/ghost-green.png' },\n      { alias: 'type4', src: '/assets/images/ghosts/ghost-purple.png' },\n\n      // 特殊图标 - 使用下划线命名以匹配 Tile.js 中的 SpecialTileType 常量\n      { alias: 'bomb', src: '/assets/images/special/bomb.png' },\n      { alias: 'color_bomb', src: '/assets/images/special/color-bomb.png' },\n      { alias: 'row_clear', src: '/assets/images/special/row-clear.png' },\n      { alias: 'col_clear', src: '/assets/images/special/col-clear.png' }\n    ];\n\n    try {\n      // 批量加载资源\n      const promises = assets.map((asset, index) =>\n        PIXI.Assets.load(asset.src).then(texture => {\n          this.loadProgress = ((index + 1) / assets.length) * 100;\n          if (onProgress) {\n            onProgress(this.loadProgress);\n          }\n          console.log(`  ✅ 加载完成: ${asset.alias} (${this.loadProgress.toFixed(0)}%)`);\n          return { alias: asset.alias, texture };\n        })\n      );\n\n      const results = await Promise.all(promises);\n\n      // 缓存纹理到 Map\n      results.forEach(({ alias, texture }) => {\n        this.textures.set(alias, texture);\n      });\n\n      this.isLoaded = true;\n      console.log('✅ 所有纹理加载完成！');\n      return true;\n\n    } catch (error) {\n      console.error('❌ 纹理加载失败:', error);\n\n      // 尝试重新加载失败的资源\n      await this.retryFailedAssets(assets);\n    }\n  }\n\n  /**\n   * 重试加载失败的资源\n   */\n  async retryFailedAssets(assets, maxRetries = 3) {\n    console.log('🔄 重试加载失败的资源...');\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        // 检查哪些资源加载失败\n        const failedAssets = assets.filter(asset =>\n          !PIXI.Assets.cache.has(asset.src)\n        );\n\n        if (failedAssets.length === 0) {\n          console.log('✅ 所有资源加载成功');\n          this.isLoaded = true;\n          return;\n        }\n\n        console.log(`  尝试 ${attempt}/${maxRetries}: ${failedAssets.length} 个资源`);\n\n        // 重新加载失败的资源\n        await Promise.all(\n          failedAssets.map(asset => PIXI.Assets.load(asset.src))\n        );\n\n      } catch (error) {\n        if (attempt === maxRetries) {\n          console.error('❌ 资源加载失败，已达最大重试次数:', error);\n          throw new Error('Critical: Asset loading failed after retries');\n        }\n\n        // 等待后重试\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n      }\n    }\n  }\n\n  /**\n   * 获取纹理\n   * @param {string} key - 纹理键名 (type0-4, bomb, color_bomb, row_clear, col_clear)\n   */\n  getTexture(key) {\n    if (!this.isLoaded) {\n      throw new Error('Textures not loaded yet. Call init() first.');\n    }\n\n    const texture = this.textures.get(key);\n    if (!texture) {\n      console.warn(`⚠️  纹理未找到: ${key}`);\n      return null;\n    }\n\n    return texture;\n  }\n\n  /**\n   * 检查纹理是否存在\n   */\n  hasTexture(key) {\n    return this.textures.has(key);\n  }\n\n  /**\n   * 获取加载进度\n   */\n  getProgress() {\n    return this.loadProgress;\n  }\n}\n\nexport default TileTextureFactory;\n","/**\n * 输入管理器 - 基于 PixiJS 事件系统\n * 负责处理用户输入（鼠标/触摸）并转换为游戏事件\n */\n\nimport { GameEvents } from '../core/EventBus.js';\n\nexport class InputManager {\n  constructor(app, config, eventBus) {\n    this.app = app;\n    this.config = config;\n    this.eventBus = eventBus;\n    \n    // 输入状态\n    this.selectedTile = null;\n    this.isEnabled = true;\n    \n    // 绑定方法\n    this.handleTileClick = this.handleTileClick.bind(this);\n    this.handleTilePointerOver = this.handleTilePointerOver.bind(this);\n    this.handleTilePointerOut = this.handleTilePointerOut.bind(this);\n  }\n\n  /**\n   * 初始化输入管理器\n   */\n  init() {\n    // 订阅输入启用/禁用事件\n    this.eventBus.on(GameEvents.INPUT_ENABLED, () => this.enable());\n    this.eventBus.on(GameEvents.INPUT_DISABLED, () => this.disable());\n    \n    console.log('✅ InputManager 初始化完成');\n  }\n\n  /**\n   * 为精灵添加交互事件\n   * @param {PIXI.Sprite} sprite - 图标精灵\n   */\n  addSpriteInteraction(sprite) {\n    if (!sprite) return;\n\n    // 设置交互属性\n    sprite.eventMode = 'static';\n    sprite.cursor = 'pointer';\n\n    // 添加事件监听\n    sprite.on('pointerdown', this.handleTileClick);\n    sprite.on('pointerover', this.handleTilePointerOver);\n    sprite.on('pointerout', this.handleTilePointerOut);\n  }\n\n  /**\n   * 移除精灵的交互事件\n   * @param {PIXI.Sprite} sprite - 图标精灵\n   */\n  removeSpriteInteraction(sprite) {\n    if (!sprite) return;\n\n    sprite.off('pointerdown', this.handleTileClick);\n    sprite.off('pointerover', this.handleTilePointerOver);\n    sprite.off('pointerout', this.handleTilePointerOut);\n  }\n\n  /**\n   * 处理图标点击事件\n   * @param {PIXI.FederatedPointerEvent} event - PixiJS 指针事件\n   */\n  handleTileClick(event) {\n    if (!this.isEnabled) return;\n\n    const sprite = event.currentTarget;\n    const tile = sprite.tileData;\n\n    if (!tile) return;\n\n    // 第一次点击：选中图标\n    if (!this.selectedTile) {\n      this.selectedTile = tile;\n      this.eventBus.emit(GameEvents.TILE_SELECT, { tile, position: { x: tile.x, y: tile.y } });\n      console.log(`🎯 选中图标: (${tile.x}, ${tile.y})`);\n      return;\n    }\n\n    // 第二次点击：尝试交换\n    const tile1 = this.selectedTile;\n    const tile2 = tile;\n\n    // 检查是否点击同一个图标（取消选中）\n    if (tile1.id === tile2.id) {\n      this.eventBus.emit(GameEvents.TILE_DESELECT, { tile: tile1 });\n      this.selectedTile = null;\n      console.log('❌ 取消选中');\n      return;\n    }\n\n    // 检查是否相邻\n    const isAdjacent = this.isAdjacent(tile1, tile2);\n\n    if (isAdjacent) {\n      // 相邻：先取消选中，然后触发交换\n      this.eventBus.emit(GameEvents.TILE_DESELECT, { tile: tile1 });\n      this.selectedTile = null;\n      \n      this.eventBus.emit(GameEvents.TILE_SWAP_START, { \n        tile1, \n        tile2,\n        pos1: { x: tile1.x, y: tile1.y },\n        pos2: { x: tile2.x, y: tile2.y }\n      });\n      console.log(`🔄 交换请求: (${tile1.x}, ${tile1.y}) <-> (${tile2.x}, ${tile2.y})`);\n    } else {\n      // 不相邻：取消选中第一个，选中第二个\n      this.eventBus.emit(GameEvents.TILE_DESELECT, { tile: tile1 });\n      this.selectedTile = tile2;\n      this.eventBus.emit(GameEvents.TILE_SELECT, { tile: tile2, position: { x: tile2.x, y: tile2.y } });\n      console.log(`⚠️  图标不相邻，重新选中: (${tile2.x}, ${tile2.y})`);\n    }\n  }\n\n  /**\n   * 处理鼠标悬停事件\n   * @param {PIXI.FederatedPointerEvent} event - PixiJS 指针事件\n   */\n  handleTilePointerOver(event) {\n    if (!this.isEnabled) return;\n\n    const sprite = event.currentTarget;\n    \n    // 添加悬停效果（可选）\n    sprite.alpha = 0.8;\n  }\n\n  /**\n   * 处理鼠标移出事件\n   * @param {PIXI.FederatedPointerEvent} event - PixiJS 指针事件\n   */\n  handleTilePointerOut(event) {\n    if (!this.isEnabled) return;\n\n    const sprite = event.currentTarget;\n    \n    // 恢复透明度\n    sprite.alpha = 1.0;\n  }\n\n  /**\n   * 检查两个图标是否相邻（水平或垂直）\n   * @param {Tile} tile1 - 第一个图标\n   * @param {Tile} tile2 - 第二个图标\n   */\n  isAdjacent(tile1, tile2) {\n    const dx = Math.abs(tile1.x - tile2.x);\n    const dy = Math.abs(tile1.y - tile2.y);\n    \n    // 相邻条件：水平或垂直相邻（不包括对角线）\n    return (dx === 1 && dy === 0) || (dx === 0 && dy === 1);\n  }\n\n  /**\n   * 启用输入\n   */\n  enable() {\n    this.isEnabled = true;\n    console.log('✅ 输入已启用');\n  }\n\n  /**\n   * 禁用输入\n   */\n  disable() {\n    this.isEnabled = false;\n    \n    // 如果有选中的图标，发出取消选中事件\n    if (this.selectedTile) {\n      this.eventBus.emit(GameEvents.TILE_DESELECT, { tile: this.selectedTile });\n      this.selectedTile = null;\n    }\n    \n    console.log('🚫 输入已禁用');\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    this.selectedTile = null;\n    this.isEnabled = false;\n    console.log('🗑️  InputManager 已清理');\n  }\n}\n\nexport default InputManager;\n","/**\n * 缓动函数集合\n * 用于补间动画的缓动效果\n */\n\nexport const Easing = {\n  /**\n   * 线性缓动（无缓动效果）\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  linear: (t) => t,\n\n  /**\n   * 二次方缓入\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeInQuad: (t) => t * t,\n\n  /**\n   * 二次方缓出\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeOutQuad: (t) => t * (2 - t),\n\n  /**\n   * 二次方缓入缓出\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeInOutQuad: (t) => {\n    if (t < 0.5) {\n      return 2 * t * t;\n    }\n    return -1 + (4 - 2 * t) * t;\n  },\n\n  /**\n   * 三次方缓入\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeInCubic: (t) => t * t * t,\n\n  /**\n   * 三次方缓出\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeOutCubic: (t) => {\n    const t1 = t - 1;\n    return t1 * t1 * t1 + 1;\n  },\n\n  /**\n   * 弹跳缓出效果\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeOutBounce: (t) => {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    } else if (t < 2 / 2.75) {\n      const t2 = t - 1.5 / 2.75;\n      return 7.5625 * t2 * t2 + 0.75;\n    } else if (t < 2.5 / 2.75) {\n      const t2 = t - 2.25 / 2.75;\n      return 7.5625 * t2 * t2 + 0.9375;\n    } else {\n      const t2 = t - 2.625 / 2.75;\n      return 7.5625 * t2 * t2 + 0.984375;\n    }\n  },\n\n  /**\n   * 弹性缓出效果\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeOutElastic: (t) => {\n    if (t === 0 || t === 1) return t;\n    const p = 0.3;\n    return Math.pow(2, -10 * t) * Math.sin((t - p / 4) * (2 * Math.PI) / p) + 1;\n  },\n\n  /**\n   * 背部缓出效果（超出后回弹）\n   * @param {number} t - 进度 (0-1)\n   * @returns {number} 缓动后的进度\n   */\n  easeOutBack: (t) => {\n    const c1 = 1.70158;\n    const c3 = c1 + 1;\n    return 1 + c3 * Math.pow(t - 1, 3) + c1 * Math.pow(t - 1, 2);\n  }\n};\n\nexport default Easing;\n","/**\n * 轻量级补间动画类\n * 用于实现精灵属性的平滑过渡\n */\n\nimport { Easing } from './Easing.js';\n\n/**\n * 补间动画类\n */\nexport class Tween {\n  /**\n   * 创建补间动画\n   * @param {Object} target - 目标对象（通常是 PixiJS Sprite）\n   * @param {Object} props - 要补间的属性 {x: 100, y: 200, alpha: 0.5, 'scale.x': 1.0, ...}\n   * @param {number} duration - 动画时长（毫秒）\n   * @param {string|Function} easing - 缓动函数名称或自定义函数\n   */\n  constructor(target, props, duration, easing = 'linear') {\n    this.init(target, props, duration, easing);\n  }\n\n  /**\n   * 初始化或重新初始化补间动画（用于对象池复用）\n   * @param {Object} target - 目标对象\n   * @param {Object} props - 要补间的属性\n   * @param {number} duration - 动画时长（毫秒）\n   * @param {string|Function} easing - 缓动函数名称或自定义函数\n   */\n  init(target, props, duration, easing = 'linear') {\n    this.target = target;\n    this.startProps = {};\n    this.endProps = {};\n    this.propAccessors = {}; // 存储属性访问器\n    this.duration = duration;\n    this.elapsed = 0;\n    this.isComplete = false;\n    this.isPaused = false;\n    \n    // 解析缓动函数\n    if (typeof easing === 'string') {\n      this.easing = Easing[easing] || Easing.linear;\n    } else if (typeof easing === 'function') {\n      this.easing = easing;\n    } else {\n      this.easing = Easing.linear;\n    }\n    \n    // 记录起始值并解析嵌套属性\n    if (target && props) {\n      for (let key in props) {\n        const accessor = this._parsePropertyPath(target, key);\n        if (accessor) {\n          this.propAccessors[key] = accessor;\n          this.startProps[key] = accessor.get();\n          this.endProps[key] = props[key];\n        } else {\n          console.warn(`Tween: 目标对象没有属性 \"${key}\"`);\n        }\n      }\n    }\n    \n    // Promise 支持\n    this._resolvePromise = null;\n    this._rejectPromise = null;\n    this.promise = new Promise((resolve, reject) => {\n      this._resolvePromise = resolve;\n      this._rejectPromise = reject;\n    });\n  }\n\n  /**\n   * 解析属性路径（支持嵌套属性如 \"scale.x\"）\n   * @param {Object} target - 目标对象\n   * @param {string} path - 属性路径\n   * @returns {Object|null} 属性访问器 {get, set} 或 null\n   */\n  _parsePropertyPath(target, path) {\n    const parts = path.split('.');\n    \n    // 检查路径是否有效\n    let current = target;\n    for (let i = 0; i < parts.length - 1; i++) {\n      if (current[parts[i]] === undefined) {\n        return null;\n      }\n      current = current[parts[i]];\n    }\n    \n    const lastPart = parts[parts.length - 1];\n    if (current[lastPart] === undefined) {\n      return null;\n    }\n    \n    // 返回访问器\n    return {\n      get: () => {\n        let obj = target;\n        for (let i = 0; i < parts.length - 1; i++) {\n          obj = obj[parts[i]];\n        }\n        return obj[lastPart];\n      },\n      set: (value) => {\n        let obj = target;\n        for (let i = 0; i < parts.length - 1; i++) {\n          obj = obj[parts[i]];\n        }\n        obj[lastPart] = value;\n      }\n    };\n  }\n\n  /**\n   * 更新补间动画\n   * @param {number} deltaTime - 帧间隔时间（毫秒）\n   * @returns {boolean} 是否完成\n   */\n  update(deltaTime) {\n    if (this.isComplete || this.isPaused) {\n      return this.isComplete;\n    }\n    \n    this.elapsed += deltaTime;\n    const progress = Math.min(this.elapsed / this.duration, 1);\n    \n    // ✅ 如果进度达到 1，直接设置最终值，不再计算缓动\n    if (progress >= 1) {\n      this.isComplete = true;\n      \n      // ✅ 确保最终值精确（使用访问器）\n      for (let key in this.endProps) {\n        const accessor = this.propAccessors[key];\n        if (accessor) {\n          accessor.set(this.endProps[key]);\n        }\n      }\n      \n      // 解析 Promise\n      if (this._resolvePromise) {\n        this._resolvePromise(this.target);\n      }\n      \n      return true;\n    }\n    \n    // 计算缓动进度\n    const easedProgress = this.easing(progress);\n    \n    // 更新目标对象的属性（使用访问器）\n    for (let key in this.endProps) {\n      const start = this.startProps[key];\n      const end = this.endProps[key];\n      const accessor = this.propAccessors[key];\n      \n      if (start !== undefined && end !== undefined && accessor) {\n        const value = start + (end - start) * easedProgress;\n        accessor.set(value);\n      }\n    }\n    \n    return this.isComplete;\n  }\n\n  /**\n   * 暂停动画\n   */\n  pause() {\n    this.isPaused = true;\n  }\n\n  /**\n   * 恢复动画\n   */\n  resume() {\n    this.isPaused = false;\n  }\n\n  /**\n   * 停止动画\n   */\n  stop() {\n    this.isComplete = true;\n    if (this._rejectPromise) {\n      this._rejectPromise(new Error('Tween stopped'));\n    }\n  }\n\n  /**\n   * 跳到结束状态\n   */\n  finish() {\n    this.elapsed = this.duration;\n    this.update(0);\n  }\n\n  /**\n   * 获取当前进度 (0-1)\n   */\n  getProgress() {\n    return Math.min(this.elapsed / this.duration, 1);\n  }\n\n  /**\n   * 检查是否正在运行\n   */\n  isRunning() {\n    return !this.isComplete && !this.isPaused;\n  }\n}\n\nexport default Tween;\n","/**\n * 动画控制器\n * 管理所有游戏动画效果\n */\n\nimport { Tween } from './Tween.js';\nimport { GameEvents } from '../core/EventBus.js';\nimport { ObjectPool } from '../utils/PerformanceMonitor.js';\n\n/**\n * 动画控制器类\n */\nexport class AnimationController {\n  /**\n   * 创建动画控制器\n   * @param {EventBus} eventBus - 事件总线\n   * @param {Object} config - 游戏配置\n   */\n  constructor(eventBus, config) {\n    this.eventBus = eventBus;\n    this.config = config;\n    \n    // 活动的补间动画列表\n    this.activeTweens = [];\n    \n    // 选中动画映射表（sprite -> tween）\n    this.selectionTweens = new Map();\n    \n    // 动画计数器\n    this.animationCount = 0;\n    \n    // 补间对象池（性能优化）\n    this.tweenPool = new ObjectPool(\n      () => new Tween(null, {}, 0, 'linear'),\n      (tween) => {\n        tween.target = null;\n        tween.startProps = {};\n        tween.endProps = {};\n        tween.elapsed = 0;\n        tween.isComplete = false;\n      },\n      20 // 初始池大小\n    );\n  }\n\n  /**\n   * 更新所有活动的补间动画\n   * @param {number} deltaTime - 帧间隔时间（毫秒）\n   */\n  update(deltaTime) {\n    if (this.activeTweens.length === 0) {\n      return;\n    }\n    \n    // 更新所有补间动画\n    for (let i = this.activeTweens.length - 1; i >= 0; i--) {\n      const tween = this.activeTweens[i];\n      const isComplete = tween.update(deltaTime);\n      \n      // 移除已完成的动画并回收到对象池\n      if (isComplete) {\n        this.activeTweens.splice(i, 1);\n        // 回收补间对象到对象池\n        if (this.tweenPool) {\n          this.tweenPool.release(tween);\n        }\n      }\n    }\n    \n    // 如果所有动画完成，发布事件\n    if (this.activeTweens.length === 0 && this.animationCount > 0) {\n      this.eventBus.emit(GameEvents.ANIMATION_QUEUE_EMPTY);\n      this.animationCount = 0;\n    }\n  }\n\n  /**\n   * 添加补间动画到活动列表\n   * @param {Tween} tween - 补间动画对象\n   */\n  _addTween(tween) {\n    this.activeTweens.push(tween);\n    this.animationCount++;\n  }\n\n  /**\n   * 从对象池创建补间动画（性能优化）\n   * @param {Object} target - 目标对象\n   * @param {Object} props - 要补间的属性\n   * @param {number} duration - 动画时长（毫秒）\n   * @param {string|Function} easing - 缓动函数\n   * @returns {Tween} 补间动画对象\n   */\n  _createTween(target, props, duration, easing = 'linear') {\n    if (this.tweenPool) {\n      const tween = this.tweenPool.acquire();\n      tween.init(target, props, duration, easing);\n      return tween;\n    } else {\n      // 降级：直接创建新对象\n      return new Tween(target, props, duration, easing);\n    }\n  }\n\n  /**\n   * 交换动画\n   * @param {PIXI.Sprite} sprite1 - 精灵1\n   * @param {PIXI.Sprite} sprite2 - 精灵2\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 动画完成的 Promise\n   */\n  animateSwap(sprite1, sprite2, duration) {\n    // 记录目标位置\n    const target1 = { x: sprite2.position.x, y: sprite2.position.y };\n    const target2 = { x: sprite1.position.x, y: sprite1.position.y };\n    \n    // 创建补间动画\n    const tween1 = new Tween(\n      sprite1.position,\n      target1,\n      duration,\n      'easeInOutQuad'\n    );\n    \n    const tween2 = new Tween(\n      sprite2.position,\n      target2,\n      duration,\n      'easeInOutQuad'\n    );\n    \n    // 添加到活动列表\n    this._addTween(tween1);\n    this._addTween(tween2);\n    \n    // 发布动画开始事件\n    this.eventBus.emit(GameEvents.ANIMATION_START, {\n      type: 'swap',\n      duration\n    });\n    \n    // 返回 Promise.all，等待两个动画都完成\n    return Promise.all([tween1.promise, tween2.promise]).then(() => {\n      this.eventBus.emit(GameEvents.ANIMATION_COMPLETE, {\n        type: 'swap'\n      });\n    });\n  }\n\n  /**\n   * 消除动画（缩放到0 + 淡出）\n   * @param {Array<PIXI.Sprite>} sprites - 精灵数组\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 动画完成的 Promise\n   */\n  animateRemove(sprites, duration) {\n    const promises = [];\n    \n    for (const sprite of sprites) {\n      // 创建缩放和淡出动画\n      const tween = new Tween(\n        sprite,\n        {\n          'scale.x': 0,\n          'scale.y': 0,\n          alpha: 0\n        },\n        duration,\n        'easeInQuad'\n      );\n      \n      this._addTween(tween);\n      promises.push(tween.promise);\n    }\n    \n    // 发布动画开始事件\n    this.eventBus.emit(GameEvents.ANIMATION_START, {\n      type: 'remove',\n      duration,\n      count: sprites.length\n    });\n    \n    // 返回 Promise.all，等待所有动画完成\n    return Promise.all(promises).then(() => {\n      this.eventBus.emit(GameEvents.ANIMATION_COMPLETE, {\n        type: 'remove'\n      });\n    });\n  }\n\n  /**\n   * 下落动画\n   * @param {PIXI.Sprite} sprite - 精灵对象\n   * @param {number} targetY - 目标Y坐标\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 动画完成的 Promise\n   */\n  animateFall(sprite, targetY, duration) {\n    // 创建下落动画（使用缓出效果模拟重力）\n    const tween = new Tween(\n      sprite.position,\n      { y: targetY },\n      duration,\n      'easeOutQuad'\n    );\n    \n    this._addTween(tween);\n    \n    return tween.promise;\n  }\n\n  /**\n   * 批量下落动画\n   * @param {Array<{sprite, targetY}>} movements - 移动数组\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 所有动画完成的 Promise\n   */\n  animateFallBatch(movements, duration) {\n    if (movements.length === 0) {\n      return Promise.resolve();\n    }\n    \n    const promises = movements.map(({ sprite, targetY }) => \n      this.animateFall(sprite, targetY, duration)\n    );\n    \n    // 发布动画开始事件\n    this.eventBus.emit(GameEvents.ANIMATION_START, {\n      type: 'fall',\n      duration,\n      count: movements.length\n    });\n    \n    return Promise.all(promises).then(() => {\n      this.eventBus.emit(GameEvents.ANIMATION_COMPLETE, {\n        type: 'fall'\n      });\n    });\n  }\n\n  /**\n   * 生成动画（从上方弹出）\n   * @param {PIXI.Sprite} sprite - 精灵对象\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 动画完成的 Promise\n   */\n  animateSpawn(sprite, duration) {\n    // ✅ 先停止该精灵上所有动画（防止冲突）\n    for (let i = this.activeTweens.length - 1; i >= 0; i--) {\n      const tween = this.activeTweens[i];\n      if (tween.target === sprite || tween.target === sprite.scale) {\n        tween.stop();\n        this.activeTweens.splice(i, 1);\n      }\n    }\n    \n    // ✅ 获取正常缩放值\n    const normalScale = sprite.normalScale || 1.0;\n    \n    // 设置初始状态（缩放为0，透明）\n    sprite.scale.set(0);\n    sprite.alpha = 0;\n    \n    // ✅ 动画到正常缩放值（而不是硬编码的 1.0）\n    const tween = new Tween(\n      sprite,\n      {\n        'scale.x': normalScale,\n        'scale.y': normalScale,\n        alpha: 1.0\n      },\n      duration,\n      'easeOutCubic'\n    );\n    \n    this._addTween(tween);\n    \n    // ✅ 确保动画完成后精确设置为正常缩放\n    return tween.promise.then(() => {\n      sprite.scale.set(normalScale);\n      sprite.alpha = 1.0;\n      return sprite;\n    }).catch((error) => {\n      // 即使动画被中断，也要恢复正常状态\n      sprite.scale.set(normalScale);\n      sprite.alpha = 1.0;\n      throw error;\n    });\n  }\n\n  /**\n   * 批量生成动画\n   * @param {Array<PIXI.Sprite>} sprites - 精灵数组\n   * @param {number} duration - 动画时长（毫秒）\n   * @returns {Promise} 所有动画完成的 Promise\n   */\n  animateSpawnBatch(sprites, duration) {\n    if (sprites.length === 0) {\n      return Promise.resolve();\n    }\n    \n    const promises = sprites.map(sprite => \n      this.animateSpawn(sprite, duration)\n    );\n    \n    // 发布动画开始事件\n    this.eventBus.emit(GameEvents.ANIMATION_START, {\n      type: 'spawn',\n      duration,\n      count: sprites.length\n    });\n    \n    return Promise.all(promises).then(() => {\n      this.eventBus.emit(GameEvents.ANIMATION_COMPLETE, {\n        type: 'spawn'\n      });\n    });\n  }\n\n  /**\n   * 选中动画（微小脉冲效果）\n   * @param {PIXI.Sprite} sprite - 精灵对象\n   */\n  animateSelection(sprite) {\n    if (!sprite) {\n      return;\n    }\n    \n    // ✅ 先停止所有其他精灵的选中动画\n    this.stopAllSelections();\n    \n    // ✅ 停止该精灵上所有动画\n    for (let i = this.activeTweens.length - 1; i >= 0; i--) {\n      const tween = this.activeTweens[i];\n      if (tween.target === sprite || tween.target === sprite.scale || tween.target === sprite.position) {\n        tween.stop();\n        this.activeTweens.splice(i, 1);\n      }\n    }\n    \n    // ✅ 获取正常缩放值\n    const normalScale = sprite.normalScale || 1.0;\n    \n    // ✅ 强制设置为正常缩放\n    sprite.scale.set(normalScale);\n    \n    // 标记该精灵正在播放选中动画\n    this.selectionTweens.set(sprite, true);\n    \n    // ✅ 脉冲动画：基于 normalScale 进行微小缩放（0.95x - 1.05x）\n    const minScale = normalScale * 0.95;  // 缩小到 95%\n    const maxScale = normalScale * 1.05;  // 放大到 105%\n    \n    const pulse = () => {\n      if (!this.selectionTweens.has(sprite)) {\n        return;\n      }\n      \n      // 缩小阶段\n      const shrinkTween = new Tween(\n        sprite.scale, \n        { x: minScale, y: minScale }, \n        400, \n        'easeInOutQuad'\n      );\n      this._addTween(shrinkTween);\n      \n      shrinkTween.promise.then(() => {\n        if (!this.selectionTweens.has(sprite)) {\n          sprite.scale.set(normalScale);\n          return;\n        }\n        \n        // 放大阶段\n        const expandTween = new Tween(\n          sprite.scale, \n          { x: maxScale, y: maxScale }, \n          400, \n          'easeInOutQuad'\n        );\n        this._addTween(expandTween);\n        \n        expandTween.promise.then(() => {\n          if (!this.selectionTweens.has(sprite)) {\n            sprite.scale.set(normalScale);\n            return;\n          }\n          \n          // 恢复到正常大小\n          const restoreTween = new Tween(\n            sprite.scale, \n            { x: normalScale, y: normalScale }, \n            400, \n            'easeInOutQuad'\n          );\n          this._addTween(restoreTween);\n          \n          restoreTween.promise.then(() => {\n            pulse(); // 继续循环\n          }).catch(() => {\n            sprite.scale.set(normalScale);\n          });\n        }).catch(() => {\n          sprite.scale.set(normalScale);\n        });\n      }).catch(() => {\n        sprite.scale.set(normalScale);\n      });\n    };\n    \n    pulse();\n  }\n\n  /**\n   * 停止选中动画\n   * @param {PIXI.Sprite} sprite - 精灵对象\n   */\n  stopSelection(sprite) {\n    if (!sprite) {\n      return;\n    }\n    \n    // 先删除标记\n    this.selectionTweens.delete(sprite);\n    \n    // 停止所有与该精灵相关的补间动画\n    for (let i = this.activeTweens.length - 1; i >= 0; i--) {\n      const tween = this.activeTweens[i];\n      // 检查是否是该精灵的动画（scale 或 position）\n      if (tween.target === sprite.scale || tween.target === sprite.position || tween.target === sprite) {\n        tween.stop();\n        this.activeTweens.splice(i, 1);\n      }\n    }\n    \n    // ✅ 关键：立即恢复正常缩放（使用 normalScale）\n    const normalScale = sprite.normalScale || 1.0;\n    if (sprite.scale) {\n      sprite.scale.set(normalScale);\n    }\n    if (sprite.alpha !== undefined) {\n      sprite.alpha = 1.0;\n    }\n  }\n\n  /**\n   * 检查是否有动画正在播放\n   * @returns {boolean}\n   */\n  isAnimating() {\n    return this.activeTweens.length > 0;\n  }\n\n  /**\n   * 停止所有动画\n   */\n  stopAll() {\n    // 停止所有补间动画\n    this.activeTweens.forEach(tween => tween.stop());\n    this.activeTweens = [];\n    \n    // 停止所有选中动画，恢复正常缩放\n    this.selectionTweens.forEach((value, sprite) => {\n      if (sprite && sprite.scale) {\n        const normalScale = sprite.normalScale || 1.0;\n        sprite.scale.set(normalScale);\n      }\n    });\n    this.selectionTweens.clear();\n    \n    this.animationCount = 0;\n    \n    console.log('🛑 所有动画已停止');\n  }\n\n  /**\n   * 停止所有选中动画\n   */\n  stopAllSelections() {\n    // 复制 keys 以避免在迭代时修改 Map\n    const sprites = Array.from(this.selectionTweens.keys());\n    sprites.forEach(sprite => {\n      this.stopSelection(sprite);\n    });\n  }\n\n  /**\n   * 获取活动动画数量\n   */\n  getActiveCount() {\n    return this.activeTweens.length;\n  }\n}\n\nexport default AnimationController;\n","/**\n * 错误处理器\n * 统一处理游戏中的各种错误\n */\n\n/**\n * 游戏错误类\n */\nexport class GameError extends Error {\n  constructor(type, message, details = null) {\n    super(message);\n    this.name = 'GameError';\n    this.type = type;\n    this.details = details;\n    this.timestamp = Date.now();\n  }\n}\n\n/**\n * 错误类型常量\n */\nexport const ErrorType = {\n  INIT_ERROR: 'INIT_ERROR',           // 初始化错误\n  LOGIC_ERROR: 'LOGIC_ERROR',         // 游戏逻辑错误\n  RENDER_ERROR: 'RENDER_ERROR',       // 渲染错误\n  ANIMATION_ERROR: 'ANIMATION_ERROR', // 动画错误\n  RESOURCE_ERROR: 'RESOURCE_ERROR',   // 资源加载错误\n  CONFIG_ERROR: 'CONFIG_ERROR',       // 配置错误\n  CONTEXT_LOST: 'CONTEXT_LOST'        // WebGL上下文丢失\n};\n\n/**\n * 错误处理器类\n */\nexport class ErrorHandler {\n  constructor(eventBus = null) {\n    this.eventBus = eventBus;\n    this.errorLog = [];\n    this.maxLogSize = 50;\n    this.isRecovering = false;\n  }\n\n  /**\n   * 处理错误\n   * @param {GameError|Error} error - 错误对象\n   * @param {Object} context - 错误上下文\n   */\n  handle(error, context = {}) {\n    // 记录错误\n    this.logError(error, context);\n\n    // 根据错误类型处理\n    if (error instanceof GameError) {\n      this.handleGameError(error, context);\n    } else {\n      this.handleGenericError(error, context);\n    }\n\n    // 发布错误事件\n    if (this.eventBus) {\n      this.eventBus.emit('error', {\n        type: error.type || 'UNKNOWN_ERROR',\n        message: error.message,\n        error,\n        context\n      });\n    }\n  }\n\n  /**\n   * 处理游戏错误\n   * @param {GameError} error - 游戏错误\n   * @param {Object} context - 错误上下文\n   */\n  handleGameError(error, context) {\n    console.error(`[${error.type}] ${error.message}`, error.details || '');\n\n    switch (error.type) {\n      case ErrorType.INIT_ERROR:\n        this.handleInitError(error, context);\n        break;\n\n      case ErrorType.LOGIC_ERROR:\n        this.handleLogicError(error, context);\n        break;\n\n      case ErrorType.RENDER_ERROR:\n        this.handleRenderError(error, context);\n        break;\n\n      case ErrorType.ANIMATION_ERROR:\n        this.handleAnimationError(error, context);\n        break;\n\n      case ErrorType.RESOURCE_ERROR:\n        this.handleResourceError(error, context);\n        break;\n\n      case ErrorType.CONFIG_ERROR:\n        this.handleConfigError(error, context);\n        break;\n\n      case ErrorType.CONTEXT_LOST:\n        this.handleContextLost(error, context);\n        break;\n\n      default:\n        this.showErrorMessage('发生未知错误，请刷新页面重试');\n    }\n  }\n\n  /**\n   * 处理通用错误\n   * @param {Error} error - 错误对象\n   * @param {Object} context - 错误上下文\n   */\n  handleGenericError(error, context) {\n    console.error('Unexpected error:', error);\n    this.showErrorMessage('发生意外错误，请刷新页面重试');\n  }\n\n  /**\n   * 处理初始化错误\n   */\n  handleInitError(error, context) {\n    this.showErrorMessage(\n      '游戏初始化失败',\n      error.message,\n      [{ text: '刷新页面', action: () => window.location.reload() }]\n    );\n  }\n\n  /**\n   * 处理逻辑错误\n   */\n  handleLogicError(error, context) {\n    console.warn('Logic error occurred, attempting to recover...');\n    \n    // 尝试恢复游戏状态\n    if (context.gameEngine && !this.isRecovering) {\n      this.isRecovering = true;\n      try {\n        context.gameEngine.reset();\n        this.showErrorMessage('游戏状态异常，已自动重置', '', [], 2000);\n      } catch (e) {\n        console.error('Failed to recover:', e);\n        this.showErrorMessage('无法恢复游戏状态，请刷新页面');\n      } finally {\n        this.isRecovering = false;\n      }\n    }\n  }\n\n  /**\n   * 处理渲染错误\n   */\n  handleRenderError(error, context) {\n    console.warn('Render error occurred, attempting to recover...');\n    \n    // 尝试重新初始化渲染器\n    if (context.renderEngine && !this.isRecovering) {\n      this.isRecovering = true;\n      try {\n        // 简单的恢复策略：标记需要重绘\n        if (context.renderEngine.markDirty) {\n          context.renderEngine.markDirty();\n        }\n        this.showErrorMessage('渲染异常，已尝试恢复', '', [], 2000);\n      } catch (e) {\n        console.error('Failed to recover render engine:', e);\n        this.showErrorMessage('渲染引擎故障，请刷新页面');\n      } finally {\n        this.isRecovering = false;\n      }\n    }\n  }\n\n  /**\n   * 处理动画错误\n   */\n  handleAnimationError(error, context) {\n    console.warn('Animation error occurred, skipping animation...');\n    \n    // 动画错误通常不致命，跳过即可\n    if (context.animationController) {\n      try {\n        context.animationController.stopAll();\n      } catch (e) {\n        console.error('Failed to stop animations:', e);\n      }\n    }\n  }\n\n  /**\n   * 处理资源加载错误\n   */\n  handleResourceError(error, context) {\n    this.showErrorMessage(\n      '资源加载失败',\n      error.message,\n      [\n        { text: '重试', action: () => window.location.reload() },\n        { text: '取消', action: () => {} }\n      ]\n    );\n  }\n\n  /**\n   * 处理配置错误\n   */\n  handleConfigError(error, context) {\n    this.showErrorMessage(\n      '配置错误',\n      error.message,\n      [{ text: '确定', action: () => window.location.reload() }]\n    );\n  }\n\n  /**\n   * 处理WebGL上下文丢失\n   */\n  handleContextLost(error, context) {\n    console.error('WebGL context lost');\n    \n    this.showErrorMessage(\n      'WebGL上下文丢失',\n      '可能是GPU资源不足或驱动问题',\n      [\n        { text: '刷新页面', action: () => window.location.reload() },\n        { text: '稍后重试', action: () => {} }\n      ]\n    );\n\n    // 尝试恢复上下文\n    if (context.renderEngine && context.renderEngine.app) {\n      const canvas = context.renderEngine.app.canvas;\n      if (canvas) {\n        canvas.addEventListener('webglcontextrestored', () => {\n          console.log('WebGL context restored');\n          window.location.reload();\n        }, { once: true });\n      }\n    }\n  }\n\n  /**\n   * 显示错误消息\n   * @param {string} title - 错误标题\n   * @param {string} message - 错误消息\n   * @param {Array} buttons - 按钮配置\n   * @param {number} autoClose - 自动关闭时间（毫秒）\n   */\n  showErrorMessage(title, message = '', buttons = [], autoClose = 0) {\n    // 创建错误提示UI\n    const overlay = document.createElement('div');\n    overlay.className = 'error-overlay';\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 10000;\n    `;\n\n    const dialog = document.createElement('div');\n    dialog.className = 'error-dialog';\n    dialog.style.cssText = `\n      background: #2c3e50;\n      color: #ecf0f1;\n      padding: 30px;\n      border-radius: 10px;\n      max-width: 400px;\n      text-align: center;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\n    `;\n\n    const titleEl = document.createElement('h2');\n    titleEl.textContent = title;\n    titleEl.style.cssText = `\n      margin: 0 0 15px 0;\n      color: #e74c3c;\n      font-size: 24px;\n    `;\n\n    const messageEl = document.createElement('p');\n    messageEl.textContent = message;\n    messageEl.style.cssText = `\n      margin: 0 0 20px 0;\n      color: #bdc3c7;\n      font-size: 16px;\n      line-height: 1.5;\n    `;\n\n    dialog.appendChild(titleEl);\n    if (message) {\n      dialog.appendChild(messageEl);\n    }\n\n    // 添加按钮\n    if (buttons.length > 0) {\n      const buttonContainer = document.createElement('div');\n      buttonContainer.style.cssText = `\n        display: flex;\n        gap: 10px;\n        justify-content: center;\n      `;\n\n      buttons.forEach(btn => {\n        const button = document.createElement('button');\n        button.textContent = btn.text;\n        button.style.cssText = `\n          padding: 10px 20px;\n          background: #3498db;\n          color: white;\n          border: none;\n          border-radius: 5px;\n          cursor: pointer;\n          font-size: 16px;\n          transition: background 0.3s;\n        `;\n        button.onmouseover = () => button.style.background = '#2980b9';\n        button.onmouseout = () => button.style.background = '#3498db';\n        button.onclick = () => {\n          document.body.removeChild(overlay);\n          if (btn.action) btn.action();\n        };\n        buttonContainer.appendChild(button);\n      });\n\n      dialog.appendChild(buttonContainer);\n    }\n\n    overlay.appendChild(dialog);\n    document.body.appendChild(overlay);\n\n    // 自动关闭\n    if (autoClose > 0) {\n      setTimeout(() => {\n        if (document.body.contains(overlay)) {\n          document.body.removeChild(overlay);\n        }\n      }, autoClose);\n    }\n  }\n\n  /**\n   * 记录错误\n   * @param {Error} error - 错误对象\n   * @param {Object} context - 错误上下文\n   */\n  logError(error, context) {\n    const logEntry = {\n      timestamp: Date.now(),\n      type: error.type || 'UNKNOWN',\n      message: error.message,\n      stack: error.stack,\n      context\n    };\n\n    this.errorLog.push(logEntry);\n\n    // 限制日志大小\n    if (this.errorLog.length > this.maxLogSize) {\n      this.errorLog.shift();\n    }\n  }\n\n  /**\n   * 获取错误日志\n   * @returns {Array} 错误日志\n   */\n  getErrorLog() {\n    return [...this.errorLog];\n  }\n\n  /**\n   * 清除错误日志\n   */\n  clearErrorLog() {\n    this.errorLog = [];\n  }\n\n  /**\n   * 验证配置\n   * @param {Object} config - 配置对象\n   * @throws {GameError} 配置错误\n   */\n  static validateConfig(config) {\n    const required = ['board', 'rendering', 'animation', 'scoring', 'timer'];\n    \n    for (const key of required) {\n      if (!config[key]) {\n        throw new GameError(\n          ErrorType.CONFIG_ERROR,\n          `缺少必需的配置项: ${key}`\n        );\n      }\n    }\n\n    // 验证游戏板配置\n    if (config.board.rows < 4 || config.board.rows > 20) {\n      throw new GameError(\n        ErrorType.CONFIG_ERROR,\n        '游戏板行数必须在4-20之间'\n      );\n    }\n\n    if (config.board.cols < 4 || config.board.cols > 20) {\n      throw new GameError(\n        ErrorType.CONFIG_ERROR,\n        '游戏板列数必须在4-20之间'\n      );\n    }\n\n    if (config.board.tileTypes < 3 || config.board.tileTypes > 10) {\n      throw new GameError(\n        ErrorType.CONFIG_ERROR,\n        '图标类型数量必须在3-10之间'\n      );\n    }\n\n    // 验证渲染配置\n    if (config.rendering.tileSize < 32 || config.rendering.tileSize > 128) {\n      throw new GameError(\n        ErrorType.CONFIG_ERROR,\n        '图标尺寸必须在32-128之间'\n      );\n    }\n\n    return true;\n  }\n}\n\nexport default ErrorHandler;\n","/**\n * 游戏主入口\n * 初始化所有模块并启动游戏\n */\n\nimport { GameConfig } from './config.js';\nimport { EventBus } from './core/EventBus.js';\nimport { StateManager, GameState } from './core/StateManager.js';\nimport { GameEngine } from './core/GameEngine.js';\nimport { BoardManager } from './game/BoardManager.js';\nimport { MatchDetector } from './game/MatchDetector.js';\nimport { SpecialTileManager } from './game/SpecialTileManager.js';\nimport { RenderEngine } from './rendering/RenderEngine.js';\nimport { TileTextureFactory } from './rendering/TileTextureFactory.js';\nimport { InputManager } from './input/InputManager.js';\nimport { AnimationController } from './animation/AnimationController.js';\nimport { ErrorHandler, GameError, ErrorType } from './utils/ErrorHandler.js';\nimport { PerformanceMonitor } from './utils/PerformanceMonitor.js';\n\n/**\n * 游戏主类\n */\nclass Game {\n  constructor() {\n    this.config = GameConfig;\n    this.eventBus = new EventBus();\n    this.errorHandler = new ErrorHandler(this.eventBus);\n    this.performanceMonitor = new PerformanceMonitor(this.config);\n    \n    // 核心模块\n    this.stateManager = null;\n    this.gameEngine = null;\n    this.boardManager = null;\n    this.matchDetector = null;\n    this.specialTileManager = null;\n    this.renderEngine = null;\n    this.textureFactory = null;\n    this.inputManager = null;\n    this.animationController = null;\n    \n    // 初始化状态\n    this.isInitialized = false;\n    \n    // 设置全局错误处理\n    this.setupGlobalErrorHandlers();\n  }\n\n  /**\n   * 设置全局错误处理\n   */\n  setupGlobalErrorHandlers() {\n    // 捕获未处理的Promise错误\n    window.addEventListener('unhandledrejection', (event) => {\n      console.error('Unhandled promise rejection:', event.reason);\n      this.errorHandler.handle(\n        new GameError(ErrorType.LOGIC_ERROR, '未处理的Promise错误', event.reason),\n        { gameEngine: this.gameEngine }\n      );\n      event.preventDefault();\n    });\n\n    // 捕获全局错误\n    window.addEventListener('error', (event) => {\n      console.error('Global error:', event.error);\n      this.errorHandler.handle(\n        new GameError(ErrorType.LOGIC_ERROR, '全局错误', event.error),\n        { gameEngine: this.gameEngine }\n      );\n    });\n  }\n\n  /**\n   * 初始化游戏\n   */\n  async init() {\n    try {\n      // 验证配置\n      ErrorHandler.validateConfig(this.config);\n      \n      console.log('🎮 开始初始化游戏...\\n');\n\n      // 1. 创建事件总线\n      console.log('📡 初始化事件总线...');\n      // EventBus 已在构造函数中创建\n\n      // 2. 创建状态管理器\n      console.log('🎯 初始化状态管理器...');\n      this.stateManager = new StateManager(GameState.MENU, this.eventBus);\n\n      // 3. 创建游戏板管理器\n      console.log('🎲 初始化游戏板管理器...');\n      this.matchDetector = new MatchDetector();\n      this.boardManager = new BoardManager(\n        this.config.board.rows,\n        this.config.board.cols,\n        this.config.board.tileTypes,\n        this.matchDetector\n      );\n\n      // 4. 创建游戏板\n      console.log('🎯 创建游戏板...');\n      this.boardManager.createBoard();\n      this.boardManager.ensureNoInitialMatches();\n      console.log(`  ✅ 游戏板创建完成: ${this.config.board.rows}x${this.config.board.cols}`);\n\n      // 5. 创建动画控制器\n      console.log('🎬 初始化动画控制器...');\n      this.animationController = new AnimationController(this.eventBus, this.config);\n\n      // 5.5 创建特殊图标管理器\n      console.log('✨ 初始化特殊图标管理器...');\n      this.specialTileManager = new SpecialTileManager(this.config, this.boardManager);\n\n      // 6. 创建游戏引擎\n      console.log('⚙️  初始化游戏引擎...');\n      this.gameEngine = new GameEngine(\n        this.config,\n        this.eventBus,\n        this.boardManager,\n        this.matchDetector,\n        this.stateManager,\n        this.animationController,\n        this.specialTileManager\n      );\n      this.gameEngine.init();\n\n      // 7. 初始化纹理工厂\n      console.log('\\n🎨 加载纹理资源...');\n      this.textureFactory = new TileTextureFactory(this.config);\n      \n      // 显示加载进度\n      try {\n        await this.textureFactory.init((progress) => {\n          // 可以在这里更新加载进度UI\n          if (progress % 20 === 0 || progress === 100) {\n            console.log(`  📦 加载进度: ${progress.toFixed(0)}%`);\n          }\n        });\n      } catch (error) {\n        throw new GameError(\n          ErrorType.RESOURCE_ERROR,\n          '纹理资源加载失败',\n          error\n        );\n      }\n\n      // 8. 初始化渲染引擎\n      console.log('\\n🖼️  初始化渲染引擎...');\n      const container = document.getElementById('game-container');\n      if (!container) {\n        throw new GameError(\n          ErrorType.INIT_ERROR,\n          '找不到游戏容器元素 #game-container'\n        );\n      }\n\n      this.renderEngine = new RenderEngine(container, this.config, this.eventBus);\n      try {\n        await this.renderEngine.init();\n        \n        // 监听WebGL上下文丢失\n        if (this.renderEngine.app && this.renderEngine.app.canvas) {\n          this.renderEngine.app.canvas.addEventListener('webglcontextlost', (event) => {\n            event.preventDefault();\n            this.errorHandler.handle(\n              new GameError(ErrorType.CONTEXT_LOST, 'WebGL上下文丢失'),\n              { renderEngine: this.renderEngine }\n            );\n          });\n        }\n      } catch (error) {\n        throw new GameError(\n          ErrorType.RENDER_ERROR,\n          '渲染引擎初始化失败',\n          error\n        );\n      }\n\n      // 9. 创建 UI 元素\n      console.log('🎨 创建 UI 元素...');\n      this.renderEngine.createUI();\n\n      // 10. 渲染游戏板\n      console.log('🎨 渲染游戏板...');\n      this.renderEngine.renderBoard(this.boardManager, this.textureFactory);\n\n      // 11. 初始化输入管理器\n      console.log('\\n🎮 初始化输入管理器...');\n      this.inputManager = new InputManager(\n        this.renderEngine.app,\n        this.config,\n        this.eventBus\n      );\n      this.inputManager.init();\n\n      // 为所有精灵添加交互事件\n      this.renderEngine.tileSprites.forEach(sprite => {\n        this.inputManager.addSpriteInteraction(sprite);\n      });\n\n      // 12. 设置游戏循环（更新动画和游戏逻辑）\n      this.renderEngine.app.ticker.add((ticker) => {\n        const deltaTime = ticker.deltaMS;\n        \n        // 更新性能监控\n        this.performanceMonitor.update(deltaTime);\n        \n        // 更新动画和游戏逻辑\n        this.animationController.update(deltaTime);\n        this.gameEngine.update(deltaTime / 1000); // 转换为秒\n      });\n\n      // 13. 添加键盘事件监听\n      this.setupKeyboardListeners();\n\n      // 14. 订阅游戏事件\n      this.setupEventListeners();\n\n      // 15. 初始化性能监控器\n      this.performanceMonitor.init();\n\n      // 16. 显示开始菜单\n      this.renderEngine.createStartMenu();\n\n      this.isInitialized = true;\n      console.log('\\n✨ 游戏初始化完成！\\n');\n      console.log('💡 提示: 点击\"开始游戏\"按钮开始游戏');\n      console.log('💡 游戏中按 ESC 键暂停/恢复游戏');\n      \n      if (this.config.debug.enabled) {\n        console.log('💡 调试模式已启用');\n        if (this.config.debug.showFPS) {\n          console.log('💡 FPS显示已启用（右上角）');\n        }\n      }\n\n    } catch (error) {\n      console.error('❌ 游戏初始化失败:', error);\n      \n      // 使用错误处理器处理\n      if (error instanceof GameError) {\n        this.errorHandler.handle(error, {\n          gameEngine: this.gameEngine,\n          renderEngine: this.renderEngine\n        });\n      } else {\n        this.errorHandler.handle(\n          new GameError(ErrorType.INIT_ERROR, '游戏初始化失败', error),\n          { gameEngine: this.gameEngine, renderEngine: this.renderEngine }\n        );\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * 设置键盘事件监听\n   */\n  setupKeyboardListeners() {\n    window.addEventListener('keydown', (event) => {\n      // ESC 键暂停/恢复游戏\n      if (event.key === 'Escape') {\n        const currentState = this.stateManager.getCurrentState();\n        if (currentState === 'playing') {\n          this.eventBus.emit('game:pause');\n          this.renderEngine.showPauseMenu();\n        } else if (currentState === 'paused') {\n          this.eventBus.emit('game:resume');\n          this.renderEngine.hidePauseMenu();\n        }\n      }\n    });\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    // 输入启用事件 - 清理所有选中动画并确保精灵状态正确\n    this.eventBus.on('input:enabled', () => {\n      this.animationController.stopAllSelections();\n      \n      // ✅ 额外保护：确保所有精灵的缩放和透明度正确（使用 normalScale）\n      this.renderEngine.tileSprites.forEach((sprite) => {\n        if (sprite && sprite.scale && sprite.alpha !== undefined) {\n          const normalScale = sprite.normalScale || 1.0;\n          sprite.scale.set(normalScale);\n          sprite.alpha = 1.0;\n        }\n      });\n    });\n\n    // 图标选中事件\n    this.eventBus.on('tile:select', ({ tile }) => {\n      this.renderEngine.highlightTile(tile);\n      \n      // 播放选中动画\n      const sprite = this.renderEngine.getTileSprite(tile.id);\n      if (sprite) {\n        this.animationController.animateSelection(sprite);\n      }\n    });\n\n    // 图标取消选中事件\n    this.eventBus.on('tile:deselect', ({ tile }) => {\n      this.renderEngine.unhighlightTile();\n      \n      // 停止选中动画\n      if (tile) {\n        const sprite = this.renderEngine.getTileSprite(tile.id);\n        if (sprite) {\n          this.animationController.stopSelection(sprite);\n        }\n      }\n    });\n\n    // 交换开始事件（传递精灵信息给游戏引擎）\n    this.eventBus.on('tile:swap:start', (data) => {\n      const { tile1, tile2 } = data;\n      \n      // 获取精灵对象\n      const sprite1 = this.renderEngine.getTileSprite(tile1.id);\n      const sprite2 = this.renderEngine.getTileSprite(tile2.id);\n      \n      // 传递精灵信息给游戏引擎\n      this.gameEngine.handleSwap({\n        ...data,\n        sprite1,\n        sprite2\n      });\n    });\n\n    // 交换完成事件（更新精灵位置）\n    this.eventBus.on('tile:swap:complete', ({ tile1, tile2 }) => {\n      this.renderEngine.unhighlightTile();\n      \n      const sprite1 = this.renderEngine.getTileSprite(tile1.id);\n      const sprite2 = this.renderEngine.getTileSprite(tile2.id);\n      \n      if (sprite1 && sprite2) {\n        this.renderEngine.updateTileSprite(sprite1, tile1);\n        this.renderEngine.updateTileSprite(sprite2, tile2);\n      }\n    });\n\n    // 交换回退事件\n    this.eventBus.on('tile:swap:revert', ({ tile1, tile2 }) => {\n      const sprite1 = this.renderEngine.getTileSprite(tile1.id);\n      const sprite2 = this.renderEngine.getTileSprite(tile2.id);\n      \n      if (sprite1 && sprite2) {\n        this.renderEngine.updateTileSprite(sprite1, tile1);\n        this.renderEngine.updateTileSprite(sprite2, tile2);\n      }\n    });\n\n    // 匹配发现事件\n    this.eventBus.on('match:found', ({ matches, totalTiles, comboCount }) => {\n      console.log(`✨ 发现匹配: ${matches.length} 个匹配，共 ${totalTiles} 个图标`);\n      if (comboCount > 1) {\n        console.log(`🔥 连锁 x${comboCount}!`);\n      }\n    });\n\n    // 分数更新事件\n    this.eventBus.on('score:update', ({ score, delta, combo, multiplier }) => {\n      console.log(`💰 分数: ${score} (+${delta})`);\n      if (combo > 1) {\n        console.log(`   连锁倍数: x${multiplier.toFixed(2)}`);\n        \n        // 🎨 创建连锁特效\n        if (this.renderEngine.particleEffects) {\n          this.renderEngine.particleEffects.createComboBurst(combo);\n        }\n      }\n      \n      // ✅ 更新 UI 显示\n      this.renderEngine.updateScore(score);\n    });\n\n    // 图标移除开始事件\n    this.eventBus.on('tile:remove:start', ({ tiles }) => {\n      // ✅ 停止被移除图标的选中动画\n      tiles.forEach(tile => {\n        const sprite = this.renderEngine.getTileSprite(tile.id);\n        if (sprite) {\n          this.animationController.stopSelection(sprite);\n          \n          // 🎨 创建消除爆炸粒子效果\n          if (this.renderEngine.particleEffects) {\n            const color = this.config.colors[`type${tile.type}`];\n            this.renderEngine.particleEffects.createExplosion(\n              sprite.x,\n              sprite.y,\n              color,\n              25\n            );\n          }\n        }\n      });\n    });\n\n    // 图标移除完成事件\n    this.eventBus.on('tile:remove:complete', ({ tiles }) => {\n      // 移除精灵\n      tiles.forEach(tile => {\n        this.renderEngine.removeTileSprite(tile.id);\n      });\n    });\n\n    // 图标下落开始事件（动画系统会处理）\n    this.eventBus.on('tile:fall:start', () => {\n      // 动画控制器会处理下落动画\n    });\n\n    // 图标下落完成事件\n    this.eventBus.on('tile:fall:complete', ({ movements }) => {\n      // 更新精灵位置（确保精确）\n      movements.forEach(({ tile }) => {\n        const sprite = this.renderEngine.getTileSprite(tile.id);\n        if (sprite) {\n          this.renderEngine.updateTileSprite(sprite, tile);\n          // ✅ 确保下落后的精灵状态正确（使用 normalScale）\n          const normalScale = sprite.normalScale || 1.0;\n          sprite.scale.set(normalScale);\n          sprite.alpha = 1.0;\n        }\n      });\n    });\n\n    // 图标生成开始事件\n    this.eventBus.on('tile:spawn:start', ({ tiles }) => {\n      // 创建新精灵（动画控制器会处理生成动画）\n      tiles.forEach(tile => {\n        try {\n          const sprite = this.renderEngine.createTileSprite(tile, this.textureFactory);\n          if (sprite) {\n            this.inputManager.addSpriteInteraction(sprite);\n          }\n        } catch (error) {\n          console.error(`❌ 创建精灵失败 (${tile.x}, ${tile.y}):`, error);\n        }\n      });\n    });\n\n    // 图标生成完成事件\n    this.eventBus.on('tile:spawn:complete', ({ tiles }) => {\n      // ✅ 确保所有新生成的精灵状态正确（使用 normalScale）\n      tiles.forEach(tile => {\n        const sprite = this.renderEngine.getTileSprite(tile.id);\n        if (sprite) {\n          const normalScale = sprite.normalScale || 1.0;\n          sprite.scale.set(normalScale);\n          sprite.alpha = 1.0;\n        }\n      });\n    });\n\n    // 游戏板稳定事件\n    this.eventBus.on('board:stable', () => {\n      console.log('✅ 游戏板稳定');\n    });\n\n    // 特殊图标生成事件\n    this.eventBus.on('special:tile:created', ({ tile, specialType, position }) => {\n      console.log(`✨ 特殊图标生成: ${specialType} at (${position.x}, ${position.y})`);\n      \n      // ✅ 更新精灵纹理（传入 textureFactory 以更新纹理）\n      const sprite = this.renderEngine.getTileSprite(tile.id);\n      if (sprite) {\n        this.renderEngine.updateTileSprite(sprite, tile, this.textureFactory);\n      }\n    });\n\n    // 特殊图标激活事件\n    this.eventBus.on('special:tile:activated', ({ tile, targetTile, positions }) => {\n      console.log(`⚡ 特殊图标激活: ${tile.specialType}, 影响 ${positions.length} 个图标`);\n      \n      // 🎨 创建特殊图标激活粒子效果\n      if (this.renderEngine.particleEffects) {\n        const sprite = this.renderEngine.getTileSprite(tile.id);\n        if (sprite) {\n          this.renderEngine.particleEffects.createSpecialActivation(\n            tile.specialType,\n            sprite.x,\n            sprite.y\n          );\n        }\n      }\n    });\n\n    // 特殊图标组合事件\n    this.eventBus.on('special:combo:activated', ({ tile1, tile2, combo }) => {\n      console.log(`💥 特殊组合: ${combo.description}`);\n    });\n\n    // 洗牌开始事件\n    this.eventBus.on('board:shuffle:start', () => {\n      console.log('🔀 开始洗牌...');\n      // 可以显示洗牌提示UI\n    });\n\n    // 洗牌完成事件\n    this.eventBus.on('board:shuffle', ({ score, time }) => {\n      console.log('🔀 洗牌完成');\n      \n      // 重新渲染游戏板\n      this.renderEngine.renderBoard(this.boardManager, this.textureFactory);\n      \n      // 为所有精灵添加交互事件\n      this.renderEngine.tileSprites.forEach(sprite => {\n        this.inputManager.addSpriteInteraction(sprite);\n      });\n    });\n\n    // 匹配发现事件（传递渲染引擎给游戏引擎）\n    this.eventBus.on('match:found', () => {\n      // 确保 processMatches 可以访问渲染引擎\n      if (!this.gameEngine.renderEngine) {\n        this.gameEngine.renderEngine = this.renderEngine;\n      }\n    });\n\n    // 游戏结束事件\n    this.eventBus.on('game:over', ({ reason, finalScore, moves }) => {\n      console.log(`\\n🎮 游戏结束！`);\n      console.log(`   原因: ${reason === 'no_moves' ? '无可用移动' : reason === 'time_up' ? '时间到' : reason}`);\n      console.log(`   最终分数: ${finalScore}`);\n      console.log(`   移动次数: ${moves}\\n`);\n      \n      // 显示游戏结束界面\n      this.renderEngine.createGameOverUI({ finalScore, moves, reason });\n    });\n\n    // 游戏开始事件\n    this.eventBus.on('game:start', () => {\n      // 隐藏开始菜单\n      this.renderEngine.hideStartMenu();\n      \n      // 更新 UI\n      this.renderEngine.updateScore(0);\n      this.renderEngine.updateTimer(this.config.timer.defaultTime);\n      this.renderEngine.updateMoves(0);\n      \n      // 启动游戏引擎（切换到 PLAYING 状态并启动计时器）\n      this.gameEngine.start();\n    });\n\n    // 计时器更新事件\n    this.eventBus.on('timer:update', ({ time }) => {\n      this.renderEngine.updateTimer(time);\n    });\n\n    // 移动次数更新事件\n    this.eventBus.on('moves:update', ({ moves }) => {\n      this.renderEngine.updateMoves(moves);\n    });\n\n    // 游戏板重置事件\n    this.eventBus.on('game:board:reset', () => {\n      // 重新渲染游戏板\n      this.renderEngine.renderBoard(this.boardManager, this.textureFactory);\n      \n      // 为所有精灵添加交互事件\n      this.renderEngine.tileSprites.forEach(sprite => {\n        this.inputManager.addSpriteInteraction(sprite);\n      });\n      \n      // 隐藏游戏结束界面\n      this.renderEngine.hideGameOverUI();\n      \n      // 更新 UI\n      this.renderEngine.updateScore(0);\n      this.renderEngine.updateTimer(this.config.timer.defaultTime);\n      this.renderEngine.updateMoves(0);\n    });\n\n    // 状态变化事件\n    this.eventBus.on('state:change', ({ from, to }) => {\n      console.log(`🔄 状态变化: ${from} -> ${to}`);\n    });\n  }\n\n  /**\n   * 启动游戏\n   */\n  start() {\n    if (!this.isInitialized) {\n      console.error('❌ 游戏未初始化');\n      return;\n    }\n\n    // 不自动启动游戏，等待用户点击开始按钮\n    console.log('💡 点击\"开始游戏\"按钮开始游戏');\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    // 打印性能报告\n    if (this.config.debug.enabled) {\n      this.performanceMonitor.printReport();\n    }\n    \n    if (this.renderEngine) {\n      this.renderEngine.destroy();\n    }\n    if (this.inputManager) {\n      this.inputManager.destroy();\n    }\n    if (this.performanceMonitor) {\n      this.performanceMonitor.destroy();\n    }\n    console.log('🗑️  游戏已清理');\n  }\n}\n\n// 创建游戏实例\nconst game = new Game();\n\n// 初始化并启动游戏\ngame.init().then(() => {\n  game.start();\n}).catch(error => {\n  console.error('❌ 游戏启动失败:', error);\n});\n\n// 导出游戏实例（便于调试）\nwindow.game = game;\n\nexport default game;\n"],"names":["GameConfig","GameEvents","EventBus","eventName","callback","callbacks","wrappedCallback","data","error","GameState","StateManager","initialState","eventBus","rules","targetState","allowedStates","newState","oldState","state","GameEngine","config","boardManager","matchDetector","stateManager","animationController","specialTileManager","tile1","tile2","pos1","pos2","sprite1","sprite2","isSpecialSwap","specialActivationPositions","combo","specialTile","normalTile","bonus","tilesToRemove","pos","tile","sprites","sprite","matches","renderEngine","movements","fallAnimations","to","targetY","anim","newTiles","newSprites","hasMatches","specialTileInfo","totalTiles","sum","match","scoreData","tileIdsToRemove","positions","x","y","comboCount","baseScore","comboMultiplier","match4Bonus","match5Bonus","basePoints","multiplier","totalScore","deltaTime","ms","resolve","TileState","SpecialTileType","Tile","type","specialType","cloned","special","BoardManager","rows","cols","tileTypes","dx","dy","emptyPositions","writeY","from","maxAttempts","attempts","newType","safeType","i","horizontalCount","leftTile","rightTile","verticalCount","upTile","downTile","types","j","index","str","Match","tiles","direction","MatchDetector","board","matchedTiles","currentType","currentMatch","boardHash","adjacentPositions","adj","hasMatch","possibleMoves","hash","SpecialTileManager","sortedMatches","a","b","centerPos","lShapeInfo","centerIndex","match1","match2","intersection","swappedTile","range","newX","newY","targetTile","targetType","lineClearTile","bombTile","rowTile","colTile","centerY","centerX","tilesCleared","Particle","velocityX","velocityY","accelerationX","accelerationY","lifetime","scale","alpha","tint","progress","ParticleEmitter","count","particleFactory","particle","PerformanceMonitor","_a","_b","now","fpsColor","memoryMB","peakMemoryMB","html","metrics","uptimeSeconds","bytes","k","sizes","ObjectPool","factory","reset","initialSize","obj","ParticleEffects","app","PIXI.Container","graphics","PIXI.Graphics","texture","PIXI.Sprite","color","explosionConfig","emitter","angle","speed","comboConfig","rainbowColors","colorIndex","specialConfig","fireColors","startX","startY","beamColors","deltaSeconds","RenderEngine","containerElement","PIXI.Application","ticker","tileSize","padding","boardOffsetX","boardOffsetY","gridColor","screenX","screenY","gridX","gridY","parent","canvasWidth","canvasHeight","scaleX","scaleY","selectionColor","selectionWidth","textureFactory","textureKey","targetSize","textureSize","correctScale","newTexture","tileId","id","PIXI.Text","text","width","height","button","bg","buttonText","score","time","minutes","seconds","moves","fps","delta","deltaText","elapsed","duration","animate","menu","overlay","title","startButton","pauseText","resumeButton","restartButton","gameOverText","scoreText","movesText","TileTextureFactory","onProgress","assets","promises","asset","PIXI.Assets","alias","maxRetries","attempt","failedAssets","key","InputManager","event","Easing","t","t1","t2","p","Tween","target","props","easing","accessor","reject","path","parts","current","lastPart","value","easedProgress","start","end","AnimationController","tween","target1","target2","tween1","tween2","normalScale","minScale","maxScale","pulse","shrinkTween","expandTween","restoreTween","GameError","message","details","ErrorType","ErrorHandler","context","e","canvas","buttons","autoClose","dialog","titleEl","messageEl","buttonContainer","btn","logEntry","required","Game","container","currentState","position","reason","finalScore","game"],"mappings":"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"}